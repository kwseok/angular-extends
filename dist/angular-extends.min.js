!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("jquery"),require("angular"));else if("function"==typeof define&&define.amd)define(["jquery","angular"],n);else{var e="object"==typeof exports?n(require("jquery"),require("angular")):n(t.jQuery,t.angular);for(var r in e)("object"==typeof exports?exports:t)[r]=e[r]}}(this,function(t,n){return function(t){function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){(function(t){"use strict";e(6),e(7),e(8),e(9),e(10),e(11),e(12),e(13),e(14),e(15),e(16),e(18),e(19),t.module("ngExtends.directives",["ngExtends.directives.countTo","ngExtends.directives.domInit","ngExtends.directives.focusMe","ngExtends.directives.lower","ngExtends.directives.repeatDone","ngExtends.directives.rotate2d","ngExtends.directives.upper"]),t.module("ngExtends.filters",["ngExtends.filters.arrays","ngExtends.filters.strings"]),t.module("ngExtends.services",["ngExtends.services.locationState","ngExtends.services.playRoutes","ngExtends.services.retainScroll","ngExtends.services.searchForm"]),t.module("ngExtends",["ngExtends.directives","ngExtends.filters","ngExtends.services"])}).call(n,e(1))},function(t,n,e){(function(n){"use strict";var r=e(3)["default"],o=e(5),i=r(o);if(!n)throw new Error("Angular.extends requires a AngularJS");t.exports=i["default"]}).call(n,e(2))},function(t,n,e){"use strict";var r=e(3)["default"],o=e(4),i=r(o);if(!i["default"])throw new Error("Angular.extends requires a jQuery");t.exports=i["default"]},function(t,n){"use strict";n["default"]=function(t){return t&&t.__esModule?t:{"default":t}},n.__esModule=!0},function(n,e){n.exports=t},function(t,e){t.exports=n},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.countTo",[]).directive("extCountTo",["$timeout",function(t){return{replace:!1,scope:!0,link:function(n,e,r){var o,i,u,s,c,l,a,f,d,p;return u=e[0],c=null,l=null,d=null,f=null,i=null,s=null,o=function(){var t;return l=30,f=0,n.timoutId=null,i=parseInt(r.extCountTo)||0,n.value=parseInt(r.value,10)||0,t=1e3*parseFloat(r.duration)||0,d=Math.ceil(t/l),s=(i-n.value)/d,c=n.value},p=function(){return n.timoutId=t(function(){return c+=s,f++,f>=d?(t.cancel(n.timoutId),c=i,u.textContent=i):(u.textContent=Math.round(c),p())},l)},a=function(){return null!=n.timoutId&&t.cancel(n.timoutId),o(),p()},r.$observe("extCountTo",function(t){return null!=t?a():void 0}),void r.$observe("value",function(){return a()})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.domInit",[]).directive("extDomInit",[function(){return{restrict:"A",link:function(t,n,e){return void e.$observe("extDomInit",function(e){var r;return"function"==typeof(r=t.$eval(e))?r(n):void 0})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.focusMe",[]).directive("extFocusMe",[function(){return{scope:{trigger:"=extFocusMe"},link:function(t,n){return void t.$watch("trigger",function(e){var r;return void("boolean"==typeof e&&("function"==typeof n[r=e?"focus":"blur"]&&n[r](),t.trigger=null))})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.lower",[]).directive("extLower",[function(){return{require:"ngModel",link:function(t,n,e,r){var o;return o=function(t){var n;return n=t?t.toLowerCase():t,n!==t&&(r.$setViewValue(n),r.$render()),n},r.$parsers.push(o),void o(t[e.ngModel])}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.repeatDone",[]).directive("extRepeatDone",[function(){return{restrict:"A",link:function(t,n,e){return void(null==e.ngRepeat&&null==e.ngRepeatStart||!t.$last||e.$observe("extRepeatDone",function(e){var r;return"function"==typeof(r=t.$eval(e))?r(n):void 0}))}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.rotate2d",[]).directive("extRotate2d",[function(){return{scope:{value:"=extRotate2d",limit:"=",angle:"="},link:function(t,n){return void t.$watchCollection("[value, limit, angle]",function(t){var e,r,o,i;return i=t[0]||0,o=t[1]||10,e=t[2]||360,r=i*e/o,void n.css({"-webkit-transform":"rotate("+r+"deg)","-moz-transform":"rotate("+r+"deg)",transform:"rotate("+r+"deg)"})})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.upper",[]).directive("extUpper",[function(){return{require:"ngModel",link:function(t,n,e,r){var o;return o=function(t){var n;return n=t?t.toUpperCase():t,n!==t&&(r.$setViewValue(n),r.$render()),n},r.$parsers.push(o),void o(t[e.ngModel])}}}])}).call(n,e(1))},function(t,n,e){(function(t,n){"use strict";var e=[].slice;t.module("ngExtends.filters.arrays",[]).filter("makeArray",[function(){return function(e){return t.isArray(e)?e:n.makeArray(e)}}]).filter("range",[function(){return function(t,n,e){var r,o,i,u,s,c,l,a,f;for(null==e&&(e=1),u="number"==typeof t&&"number"==typeof n,r=u?t:t.toString().charCodeAt(0),o=u?n:n.toString().charCodeAt(0),f=[],i=s=c=r,l=o,a=r>o?-e:e;a>0?l>=s:s>=l;i=s+=a)u?f.push(i):f.push(String.fromCharCode(i));return f}}]).filter("join",[function(){return function(t,e){return n.makeArray(t).join(e)}}]).filter("combine",[function(){return function(){var r,o,i,u;return r=arguments[0],i=2<=arguments.length?e.call(arguments,1):[],t.isArray(r)||(r=[r]),function(){var e,s,c,l,a;for(a=[],e=0,c=r.length;c>e;e++){for(u=r[e],s=0,l=i.length;l>s;s++)o=i[s],t.isFunction(o)?u=o(u):"string"==typeof o&&(u=function(){switch(o){case"=integer":return parseInt(u);case"=float":return parseFloat(u);default:return n.obj.get(u,o)}}());a.push(u)}return a}().reduce(function(t,n){return t+n})}}]).filter("limit",[function(){return function(t,e,r){var o,i;return o=(e-1)*r,i=o+r,n.makeArray(t).slice(o,i)}}]).filter("trim",[function(){return function(n){var e,r,o,i,u,s;if(t.isArray(n)){for(s=[],r=0,o=n.length;o>r;r++)e=n[r],s.push(null!=e&&"function"==typeof e.toString&&null!=(i=e.toString())&&"function"==typeof i.trim?i.trim():void 0);return s}return null!=n&&"function"==typeof n.toString&&null!=(u=n.toString())&&"function"==typeof u.trim?u.trim():void 0}}])}).call(n,e(1),e(2))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.filters.strings",[]).filter("trustAs",["$sce",function(t){return t.trustAs}]).filter("trustAsCss",["$sce",function(t){return t.trustAsCss}]).filter("trustAsHtml",["$sce",function(t){return t.trustAsHtml}]).filter("trustAsJs",["$sce",function(t){return t.trustAsJs}]).filter("trustAsResourceUrl",["$sce",function(t){return t.trustAsResourceUrl}]).filter("trustAsUrl",["$sce",function(t){return t.trustAsUrl}]).filter("replace",[function(){return function(t,n,e){return(t||"").toString().replace(n,e)}}]).filter("nl2br",[function(){return function(t){return(t||"").toString().replace(/(\r\n|\n\r|\r|\n)/g,"<br/>")}}]).filter("br2nl",[function(){return function(t){return(t||"").toString().replace(/(<br>|<br\/>)/g,"\n")}}]).filter("space2nbsp",[function(){return function(t){return(t||"").toString().replace(/\s/g,"&nbsp;")}}]).filter("nbsp2space",[function(){return function(t){return(t||"").toString().replace(/&nbsp;/g," ")}}]).filter("split",[function(){return function(n,e,r){var o;return null==n?n:n.toString().split(new RegExp(t.isArray(e)?function(){var t,n,r;for(r=[],t=0,n=e.length;n>t;t++)o=e[t],r.push(RegExp.escape(o));return r}().join("|"):RegExp.escape(e)),r)}}]).filter("cutstring",[function(){return function(t,n,e){var r;return null==n&&(n=10),null==e&&(e="..."),null==t?t:(r=t.toString(),r.length>n-e.length&&(r=r.slice(0,n)+e),r)}}]).filter("roundcutstring",[function(){return function(t,n,e,r,o){var i,u,s,c;return null==e&&(e=20),null==r&&(r="..."),null==o&&(o="..."),null==t?t:(s=t.toString(),c=(n||"").toString(),u=s.indexOf(c),-1===u?(s.length>e-o.length&&(s=s.slice(0,e)+o),s):(i=function(t,n,e,u){var s,c,l,a,f,d,p;return 0>=u||0===t.length&&0===n.length?(s=t.length>0?r:"",c=n.length>0?o:"",s+e+c):(l=u/2,1>l?i(t.slice(0,-1),n,t.slice(-1)+e,0):(f=t.slice(-l),a=n.slice(0,l),p=t.slice(0,-l),d=n.slice(l),i(p,d,f+e+a,u-f.length-a.length)))})(s.slice(0,u),s.slice(u+c.length),c,e-c.length-r.length-o.length))}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.services.locationState",[]).run(["$rootScope","$window","$location",function(t,n,e){return t.$on("$locationChangeSuccess",function(){return e.$$actualPath=e.path()}),void t.$watch(function(){return e.path()},function(t){return e.isHistoryChanged=e.$$actualPath===t})}])}).call(n,e(1))},function(t,n,e){(function(t,n){"use strict";t.module("ngExtends.services.playRoutes",[]).provider("playRoutes",[function(){return this.jsRoutes=n.Routes,void(this.$get=["$http",function(n){return function(e){var r,o,i;return i=function(t){return function(){var n,r,o,i;return o=t.apply(this,arguments),n=o.method.toLowerCase(),i=o.url,r={$route:o,method:n,url:i,absoluteUrl:o.absoluteURL,webSocketUrl:o.webSocketURL},r[n]=function(t){return e[n](i,t)},r}},(r=function(n,e){var o,u;for(o in e)u=e[o],t.isFunction(u)?n[o]=i(u):(o in n||(n[o]={}),r(n[o],u));return void 0})(o={},n.jsRoutes),o}}(this)])}])}).call(n,e(1),e(17))},function(t,n){(function(n){"use strict";if(!n.document)throw new Error("jQuery.extends requires a window with a document");t.exports=n}).call(n,function(){return this}())},function(t,n,e){(function(t,n,r){"use strict";e(15),t.module("ngExtends.services.retainScroll",["ngExtends.services.locationState"]).provider("retainScroll",[function(){return this.target=null,this.inactive=!1,this.tracking=!1,this.positions={},this.maxTryCount=10,this.whetherScrollEvaluator=["$location",function(t){return t.isHistoryChanged}],this.isDelayedEvaluator=[function(){return!1}],void(this.$get=[function(){return this}])}]).run(["$rootScope","retainScroll","$location","$timeout","$injector",function(t,e,o,i,u){var s;return s=n(e.target||r),s.on("scroll",function(){return e.tracking?e.positions[o.url()]=s.scrollTop():void 0}),t.$on("$routeChangeSuccess",function(){return e.inactive=e.tracking=!1}),t.$on("$stateChangeSuccess",function(){return e.inactive=e.tracking=!1}),void t.$on("$viewContentLoaded",function(t){var n,r,c,l;return void(e.inactive||!u.invoke(e.whetherScrollEvaluator)?(console.log("move to scroll top %o",s[0]),s.scrollTop(0),e.tracking=!0):(n=!1,r=t.targetScope.$on("$destroy",function(){return n=!0,c()}),c=function(){return s.off("scroll.retainScroll-canceler"+t.targetScope.$id)},l=function(){return s.one("scroll.retainScroll-canceler"+t.targetScope.$id,function(){return n=!0,r()})},i(function(){var t,a,f;return void(n?(console.log("Cancel scrolling %o",s[0]),e.tracking=!0):(a=e.maxTryCount,t=e.positions[o.url()]||0,(f=function(){return void(n?(console.log("Cancel scrolling %o",s[0]),e.tracking=!0):u.invoke(e.isDelayedEvaluator)?i(f,200):(c(),s.scrollTop(t),console.log(1+e.maxTryCount-a+" try move to scroll "+s.scrollTop()+" / "+t+" %o",s[0]),s.scrollTop()===t||--a<=0?(e.tracking=!0,r()):(l(),i(f,100))))})()))},100)))})}])}).call(n,e(1),e(2),e(17))},function(t,n,e){(function(t){"use strict";var n;n=function(){function n(n){this.options=n,this.options=t.isFunction(this.options)?{action:this.options}:void 0,this.options=t.extend({defaults:{}},this.options),this.current=t.copy(this.options.defaults)||{},this.form=t.copy(this.options.defaults)||{}}return n.prototype.isPristine=function(){return t.equals(this.current,this.form)},n.prototype.isDirty=function(){return!this.isPristine()},n.prototype.isChanged=function(){return!t.equals(this.current,this.options.defaults)},n.prototype.submit=function(n,e,r){var o,i,u,s,c,l;return("function"==typeof(o=this.options).preSubmit?o.preSubmit(n,e,r):void 0)!==!1&&(null!=e&&(s=function(){var t,n;t=e||{},n=[];for(c in t)l=t[c],n.push([c,l]);return n}().every(function(n){return function(e){var r,o;return r=e[0],o=e[1],t.equals(n.form[r],o,!0)}}(this)),t.extend(this.form,t.copy(s?r:e))),this.current=t.copy(this.form),"function"==typeof(i=this.options).submit&&i.submit(n,e,r),"function"==typeof(u=this.options).action&&u.action(n)),this},n.prototype.reset=function(n){var e,r,o;return("function"==typeof(e=this.options).preReset?e.preReset(n):void 0)!==!1&&(null!=n&&"function"==typeof n.$setPristine&&n.$setPristine(),this.current=t.copy(this.options.defaults)||{},this.form=t.copy(this.options.defaults)||{},"function"==typeof(r=this.options).reset&&r.reset(n),"function"==typeof(o=this.options).action&&o.action(n)),this},n.prototype.params=function(n,e){var r,o,i,u;t.isObject(n)&&(i=[n,!1],e=i[0],n=i[1]),o=n===!0?t.copy(this.current):t.copy(this.form=t.copy(this.current));for(r in this.options.defaults)t.isArray(o[r])&&(o[r]=o[r].filter(function(t){return!!t}));if(o=t.extend(o,t.copy(e)),t.isFunction(this.options.transform))for(r in o)u=o[r],o[r]=this.options.transform(r,u);return o},n}(),t.module("ngExtends.services.searchForm",[]).factory("searchForm",[function(){return function(t){return new n(t)}}])}).call(n,e(1))}])});
//# sourceMappingURL=data:application/json;base64,
