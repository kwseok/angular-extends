!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("jquery"),require("angular"));else if("function"==typeof define&&define.amd)define(["jquery","angular"],n);else{var e="object"==typeof exports?n(require("jquery"),require("angular")):n(t.jQuery,t.angular);for(var r in e)("object"==typeof exports?exports:t)[r]=e[r]}}(this,function(t,n){return function(t){function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){(function(t){"use strict";e(6),e(7),e(8),e(9),e(10),e(11),e(12),e(13),e(14),e(15),e(16),e(18),e(19),t.module("ngExtends.directives",["ngExtends.directives.countTo","ngExtends.directives.domInit","ngExtends.directives.focusMe","ngExtends.directives.lower","ngExtends.directives.repeatDone","ngExtends.directives.rotate2d","ngExtends.directives.upper"]),t.module("ngExtends.filters",["ngExtends.filters.arrays","ngExtends.filters.strings"]),t.module("ngExtends.services",["ngExtends.services.playRoutes","ngExtends.services.searchForm"]),t.module("ngExtends",["ngExtends.directives","ngExtends.filters","ngExtends.services"])}).call(n,e(1))},function(t,n,e){(function(n){"use strict";var r=e(3)["default"],o=e(5),i=r(o);if(!n)throw new Error("Angular.extends requires a AngularJS");t.exports=i["default"]}).call(n,e(2))},function(t,n,e){"use strict";var r=e(3)["default"],o=e(4),i=r(o);if(!i["default"])throw new Error("Angular.extends requires a jQuery");t.exports=i["default"]},function(t,n){"use strict";n["default"]=function(t){return t&&t.__esModule?t:{"default":t}},n.__esModule=!0},function(n,e){n.exports=t},function(t,e){t.exports=n},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.countTo",[]).directive("exCountTo",["$timeout",function(t){return{replace:!1,scope:!0,link:function(n,e,r){var o,i,u,s,c,l,a,f,p,d;u=e[0],c=null,l=null,p=null,f=null,i=null,s=null,o=function(){var t;l=30,f=0,n.timoutId=null,i=parseInt(r.exCountTo)||0,n.value=parseInt(r.value,10)||0,t=1e3*parseFloat(r.duration)||0,p=Math.ceil(t/l),s=(i-n.value)/p,c=n.value},d=function(){n.timoutId=t(function(){return c+=s,f++,f>=p?(t.cancel(n.timoutId),c=i,u.textContent=i):(u.textContent=Math.round(c),d())},l)},a=function(){null!=n.timoutId&&t.cancel(n.timoutId),o(),d()},r.$observe("exCountTo",function(t){return null!=t?a():void 0}),r.$observe("value",function(){return a()})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.domInit",[]).directive("exDomInit",[function(){return{restrict:"A",link:function(t,n,e){e.$observe("exDomInit",function(e){var r;return"function"==typeof(r=t.$eval(e))?r(n):void 0})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.focusMe",[]).directive("exFocusMe",[function(){return{scope:{trigger:"=exFocusMe"},link:function(t,n){t.$watch("trigger",function(e){var r;"boolean"==typeof e&&("function"==typeof n[r=e?"focus":"blur"]&&n[r](),t.trigger=null)})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.lower",[]).directive("exLower",[function(){return{require:"ngModel",link:function(t,n,e,r){var o;o=function(t){var e,o,i,u;return i=t?t.toLowerCase():t,i!==t&&(e=n[0],u=e.selectionStart,o=e.selectionEnd,r.$setViewValue(i),r.$render(),"function"==typeof e.setSelectionRange&&e.setSelectionRange(u,o)),i},r.$parsers.push(o),o(t[e.ngModel])}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.repeatDone",[]).directive("exRepeatDone",[function(){return{restrict:"A",link:function(t,n,e){null==e.ngRepeat&&null==e.ngRepeatStart||!t.$last||e.$observe("exRepeatDone",function(e){var r;return"function"==typeof(r=t.$eval(e))?r(n):void 0})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.rotate2d",[]).directive("exRotate2d",[function(){return{scope:{value:"=exRotate2d",limit:"=",angle:"="},link:function(t,n){t.$watchCollection("[value, limit, angle]",function(t){var e,r,o,i;i=t[0]||0,o=t[1]||10,e=t[2]||360,r=i*e/o,n.css({"-webkit-transform":"rotate("+r+"deg)","-moz-transform":"rotate("+r+"deg)",transform:"rotate("+r+"deg)"})})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.upper",[]).directive("exUpper",[function(){return{require:"ngModel",link:function(t,n,e,r){var o;o=function(t){var e,o,i,u;return u=t?t.toUpperCase():t,u!==t&&(e=n[0],i=e.selectionStart,o=e.selectionEnd,r.$setViewValue(u),r.$render(),"function"==typeof e.setSelectionRange&&e.setSelectionRange(i,o)),u},r.$parsers.push(o),o(t[e.ngModel])}}}])}).call(n,e(1))},function(t,n,e){(function(t,n){"use strict";var e=[].slice;t.module("ngExtends.filters.arrays",[]).filter("makeArray",[function(){return function(e){return t.isArray(e)?e:n.makeArray(e)}}]).filter("range",[function(){return function(t,n,e){var r,o,i,u,s,c,l,a,f;for(null==e&&(e=1),u="number"==typeof t&&"number"==typeof n,r=u?t:t.toString().charCodeAt(0),o=u?n:n.toString().charCodeAt(0),f=[],i=s=c=r,l=o,a=r>o?-e:e;a>0?l>=s:s>=l;i=s+=a)u?f.push(i):f.push(String.fromCharCode(i));return f}}]).filter("join",[function(){return function(t,e){return n.makeArray(t).join(e)}}]).filter("combine",["$parse",function(n){return function(){var r,o,i,u;return r=arguments[0],i=2<=arguments.length?e.call(arguments,1):[],t.isArray(r)||(r=[r]),function(){var e,s,c,l,a;for(a=[],e=0,c=r.length;c>e;e++){for(u=r[e],s=0,l=i.length;l>s;s++)o=i[s],t.isFunction(o)?u=o(u):"string"==typeof o&&(u=function(){switch(o){case"=integer":return parseInt(u);case"=float":return parseFloat(u);default:return n(o)(u)}}());a.push(u)}return a}().reduce(function(t,n){return t+n})}}]).filter("limit",[function(){return function(t,e,r){var o,i;return o=(e-1)*r,i=o+r,n.makeArray(t).slice(o,i)}}]).filter("trim",[function(){return function(n){var e,r,o,i,u,s;if(t.isArray(n)){for(s=[],r=0,o=n.length;o>r;r++)e=n[r],s.push(null!=e&&"function"==typeof e.toString&&null!=(i=e.toString())&&"function"==typeof i.trim?i.trim():void 0);return s}return null!=n&&"function"==typeof n.toString&&null!=(u=n.toString())&&"function"==typeof u.trim?u.trim():void 0}}])}).call(n,e(1),e(2))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.filters.strings",[]).filter("trustAs",["$sce",function(t){return function(n,e){return t.trustAs(e,n)}}]).filter("trustAsCss",["$sce",function(t){return t.trustAsCss}]).filter("trustAsHtml",["$sce",function(t){return t.trustAsHtml}]).filter("trustAsJs",["$sce",function(t){return t.trustAsJs}]).filter("trustAsResourceUrl",["$sce",function(t){return t.trustAsResourceUrl}]).filter("trustAsUrl",["$sce",function(t){return t.trustAsUrl}]).filter("replace",[function(){return function(t,n,e,r){return n instanceof RegExp||(n=new RegExp((n||"").toString(),r)),(t||"").toString().replace(n,e)}}]).filter("nl2br",[function(){return function(t){return(t||"").toString().replace(/(\r\n|\n\r|\r|\n)/g,"<br/>")}}]).filter("br2nl",[function(){return function(t){return(t||"").toString().replace(/(<br>|<br\/>)/g,"\n")}}]).filter("space2nbsp",[function(){return function(t){return(t||"").toString().replace(/\s/g,"&nbsp;")}}]).filter("nbsp2space",[function(){return function(t){return(t||"").toString().replace(/&nbsp;/g," ")}}]).filter("split",[function(){return function(n,e,r){return null==n?n:n.toString().split(new RegExp((t.isArray(e)?e.join("|"):e).toString()),r)}}]).filter("cutstring",[function(){return function(t,n,e){var r;return null==n&&(n=10),null==e&&(e="..."),null==t?t:(r=t.toString(),r.length>n-e.length&&(r=r.slice(0,n)+e),r)}}]).filter("roundcutstring",[function(){return function(t,n,e,r,o){var i,u,s,c;return null==e&&(e=20),null==r&&(r="..."),null==o&&(o="..."),null==t?t:(s=t.toString(),c=(n||"").toString(),u=s.indexOf(c),-1===u?(s.length>e-o.length&&(s=s.slice(0,e)+o),s):(i=function(t,n,e,u){var s,c,l,a,f,p,d;return 0>=u||0===t.length&&0===n.length?(s=t.length>0?r:"",c=n.length>0?o:"",s+e+c):(l=u/2,1>l?i(t.slice(0,-1),n,t.slice(-1)+e,0):(f=t.slice(-l),a=n.slice(0,l),d=t.slice(0,-l),p=n.slice(l),i(d,p,f+e+a,u-f.length-a.length)))})(s.slice(0,u),s.slice(u+c.length),c,e-c.length-r.length-o.length))}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.services.locationState",[]).run(["$rootScope","$window","$location",function(t,n,e){t.$on("$locationChangeSuccess",function(){return e.$$actualPath=e.path()}),t.$watch(function(){return e.path()},function(t){return e.isHistoryChanged=e.$$actualPath===t})}])}).call(n,e(1))},function(t,n,e){(function(t,n){"use strict";var e=[].slice;t.module("ngExtends.services.playRoutes",[]).provider("$playRoutes",[function(){this.jsRoutes=n.Routes,this.$get=["$http","$location",function(n){return function(r,o){var i,u,s;return s=function(t){return function(){var n,i,u,s,c,l,a;return l=t.apply(this,arguments),u=l.method.toLowerCase(),n=l.absoluteURL(),i=null!=(s=n.match(/^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i))?s[1]:void 0,a=o.host()===i?l.url:n,c={$route:l,method:u,url:a,absoluteURL:l.absoluteURL,webSocketURL:l.webSocketURL},c[u]=function(){var t,n;return n=1<=arguments.length?e.call(arguments,0):[],t=r[u],t.apply(t,[].concat.call([a],n))},c}},(i=function(n,e){var r,o;for(r in e)o=e[r],t.isFunction(o)?n[r]=s(o):(r in n||(n[r]={}),i(n[r],o))})(u={},n.jsRoutes),u}}(this)]}])}).call(n,e(1),e(17))},function(t,n){(function(n){"use strict";if(!n.document)throw new Error("Angular.extends requires a window with a document");t.exports=n}).call(n,function(){return this}())},function(t,n,e){(function(t,n,r){"use strict";e(15),t.module("ngExtends.services.retainScroll",["ngExtends.services.locationState"]).provider("$retainScroll",[function(){this.target=null,this.inactiveOnce=!1,this.tracking=!1,this.positions={},this.maxTryCount=10,this.whetherScrollEvaluator=["$location",function(t){return t.isHistoryChanged}],this.isDelayedEvaluator=[function(){return!1}],this.$get=[function(){return this}]}]).run(["$rootScope","$retainScroll","$location","$timeout","$injector",function(t,e,o,i,u){var s;s=n(e.target||r),s.on("scroll",function(){return e.tracking?e.positions[o.url()]=s.scrollTop():void 0}),t.$on("$locationChangeSuccess",function(){return e.inactiveOnce=e.tracking=!1}),t.$on("$viewContentLoaded",function(t){var n,r,c,l,a;e.inactiveOnce||!u.invoke(e.whetherScrollEvaluator)?(console.log("move to scroll top %o",s[0]),s.scrollTop(0),e.tracking=!0):(r=!1,n=function(){return e.tracking=!0,console.log("Canceled scrolling %o",s[0])},c=t.targetScope.$on("$destroy",function(){return r=!0,l()}),l=function(){return s.off("scroll.retainScroll-canceler"+t.targetScope.$id)},a=function(){return s.one("scroll.retainScroll-canceler"+t.targetScope.$id,function(){return r=!0,c()})},i(function(){var t,f,p;r?n():(f=e.maxTryCount,t=e.positions[o.url()]||0,(p=function(){r?n():u.invoke(e.isDelayedEvaluator)?i(p,200):(l(),s.scrollTop(t),console.log(1+e.maxTryCount-f+" try move to scrolling "+s.scrollTop()+" / "+t+" %o",s[0]),s.scrollTop()===t||--f<=0?(e.tracking=!0,c()):(a(),i(p,100)))})())},0))})}])}).call(n,e(1),e(2),e(17))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.services.searchForm",[]).factory("$searchForm",[function(){return function(n){var e;return new(e=function(){function n(n){this.options=n,t.isFunction(this.options)&&(this.options={action:this.options}),this.options=t.extend({defaults:{},preSubmit:function(t,n,e){},preReset:function(t){},submit:function(t,n,e){},reset:function(t){},action:function(t){}},this.options),this.current=t.copy(this.options.defaults)||{},this.form=t.copy(this.options.defaults)||{}}return n.prototype.isPristine=function(){return t.equals(this.current,this.form)},n.prototype.isDirty=function(){return!this.isPristine()},n.prototype.isChanged=function(){return!t.equals(this.current,this.options.defaults)},n.prototype.submit=function(n,e,r){var o,i,u,s,c,l;return("function"==typeof(o=this.options).preSubmit?o.preSubmit(n,e,r):void 0)!==!1&&(null!=e&&(s=function(){var t,n;t=e||{},n=[];for(c in t)l=t[c],n.push([c,l]);return n}().every(function(n){return function(e){var r,o;return r=e[0],o=e[1],t.equals(n.form[r],o,!0)}}(this)),t.extend(this.form,t.copy(s?r:e))),this.current=t.copy(this.form),"function"==typeof(i=this.options).submit&&i.submit(n,e,r),"function"==typeof(u=this.options).action&&u.action(n)),this},n.prototype.reset=function(n){var e,r,o;return("function"==typeof(e=this.options).preReset?e.preReset(n):void 0)!==!1&&(null!=n&&"function"==typeof n.$setPristine&&n.$setPristine(),this.current=t.copy(this.options.defaults)||{},this.form=t.copy(this.options.defaults)||{},"function"==typeof(r=this.options).reset&&r.reset(n),"function"==typeof(o=this.options).action&&o.action(n)),this},n.prototype.params=function(n,e){var r,o,i,u;t.isObject(n)&&(i=[n,!1],e=i[0],n=i[1]),o=n===!0?t.copy(this.current):t.copy(this.form=t.copy(this.current));for(r in this.options.defaults)t.isArray(o[r])&&(o[r]=o[r].filter(function(t){return!!t}));if(o=t.extend(o,t.copy(e)),t.isFunction(this.options.transform))for(r in o)u=o[r],o[r]=this.options.transform(r,u);return o},n}())(n)}}])}).call(n,e(1))}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiYW5ndWxhci1leHRlbmRzLm1pbi5qcyIsIndlYnBhY2s6L3dlYnBhY2svYm9vdHN0cmFwIDRkMGI0ODg3ODE2OGM3ZDIzZmZiIiwid2VicGFjazovLy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3NyYy92YXJzL2FuZ3VsYXIuanMiLCJ3ZWJwYWNrOi8vL3NyYy92YXJzL2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHQuanMiLCJ3ZWJwYWNrOi9leHRlcm5hbCB7XCJyb290XCI6XCJqUXVlcnlcIixcImNvbW1vbmpzXCI6XCJqcXVlcnlcIixcImNvbW1vbmpzMlwiOlwianF1ZXJ5XCIsXCJhbWRcIjpcImpxdWVyeVwifSIsIndlYnBhY2s6L2V4dGVybmFsIFwiYW5ndWxhclwiIiwid2VicGFjazovLy9zcmMvZGlyZWN0aXZlcy9jb3VudFRvLmNvZmZlZSIsIndlYnBhY2s6Ly8vc3JjL2RpcmVjdGl2ZXMvZG9tSW5pdC5jb2ZmZWUiLCJ3ZWJwYWNrOi8vL3NyYy9kaXJlY3RpdmVzL2ZvY3VzTWUuY29mZmVlIiwid2VicGFjazovLy9zcmMvZGlyZWN0aXZlcy9sb3dlci5jb2ZmZWUiLCJ3ZWJwYWNrOi8vL3NyYy9kaXJlY3RpdmVzL3JlcGVhdERvbmUuY29mZmVlIiwid2VicGFjazovLy9zcmMvZGlyZWN0aXZlcy9yb3RhdGUyZC5jb2ZmZWUiLCJ3ZWJwYWNrOi8vL3NyYy9kaXJlY3RpdmVzL3VwcGVyLmNvZmZlZSIsIndlYnBhY2s6Ly8vc3JjL2ZpbHRlcnMvYXJyYXlzLmNvZmZlZSIsIndlYnBhY2s6Ly8vc3JjL2ZpbHRlcnMvc3RyaW5ncy5jb2ZmZWUiLCJ3ZWJwYWNrOi8vL3NyYy9zZXJ2aWNlcy9sb2NhdGlvblN0YXRlLmNvZmZlZSIsIndlYnBhY2s6Ly8vc3JjL3NlcnZpY2VzL3BsYXlSb3V0ZXMuY29mZmVlIiwid2VicGFjazovLy9zcmMvdmFycy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vL3NyYy9zZXJ2aWNlcy9yZXRhaW5TY3JvbGwuY29mZmVlIiwid2VicGFjazovLy9zcmMvc2VydmljZXMvc2VhcmNoRm9ybS5jb2ZmZWUiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwidGhpcyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNF9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV81X18iLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsImFuZ3VsYXIiLCIkIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hbmd1bGFyIiwiX2FuZ3VsYXIyIiwiRXJyb3IiLCJfanF1ZXJ5IiwiX2pxdWVyeTIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRpcmVjdGl2ZSIsIiR0aW1lb3V0IiwicmVwbGFjZSIsInNjb3BlIiwibGluayIsImVsZW1lbnQiLCJhdHRycyIsImNhbGN1bGF0ZSIsImNvdW50VG8iLCJlbGVtIiwiaW5jcmVtZW50IiwibnVtIiwicmVmcmVzaEludGVydmFsIiwic3RhcnQiLCJzdGVwIiwic3RlcHMiLCJ0aWNrIiwiZHVyYXRpb24iLCJ0aW1vdXRJZCIsInBhcnNlSW50IiwiZXhDb3VudFRvIiwidmFsdWUiLCJwYXJzZUZsb2F0IiwiTWF0aCIsImNlaWwiLCJjYW5jZWwiLCJ0ZXh0Q29udGVudCIsInJvdW5kIiwiJG9ic2VydmUiLCJ2YWwiLCJyZXN0cmljdCIsImJhc2UiLCIkZXZhbCIsInRyaWdnZXIiLCIkd2F0Y2giLCJuYW1lIiwibW9kZWxDdHJsIiwidG9Mb3dlciIsImlucHV0VmFsdWUiLCJlbmQiLCJsb3dlcmVkIiwidG9Mb3dlckNhc2UiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsIiRzZXRWaWV3VmFsdWUiLCIkcmVuZGVyIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCIkcGFyc2VycyIsInB1c2giLCJuZ01vZGVsIiwibmdSZXBlYXQiLCJuZ1JlcGVhdFN0YXJ0IiwiJGxhc3QiLCJsaW1pdCIsImFuZ2xlIiwiJHdhdGNoQ29sbGVjdGlvbiIsInZhbHVlcyIsImRlZ3JlZSIsImNzcyIsIi13ZWJraXQtdHJhbnNmb3JtIiwiLW1vei10cmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJ0b1VwcGVyIiwidXBwZXJlZCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJmaWx0ZXIiLCJpbnB1dCIsImlzQXJyYXkiLCJtYWtlQXJyYXkiLCJmcm9tIiwidG8iLCJiZWdpbiIsImlzTnVtYmVyIiwiaiIsInJlZiIsInJlZjEiLCJyZWYyIiwicmVzdWx0cyIsInRvU3RyaW5nIiwiY2hhckNvZGVBdCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNlcCIsImpvaW4iLCIkcGFyc2UiLCJ0IiwidHJhbnNmb3JtZXJzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiayIsImxlbiIsImxlbjEiLCJpc0Z1bmN0aW9uIiwicmVkdWNlIiwidiIsInBhZ2UiLCJpdGVtc1BlclBhZ2UiLCJ0cmltIiwiJHNjZSIsInR5cGUiLCJ0cnVzdEFzIiwidHJ1c3RBc0NzcyIsInRydXN0QXNIdG1sIiwidHJ1c3RBc0pzIiwidHJ1c3RBc1Jlc291cmNlVXJsIiwidHJ1c3RBc1VybCIsInNlYXJjaCIsInJlcGxhY2VtZW50Iiwib3B0aW9ucyIsIlJlZ0V4cCIsInNlcGFyYXRvcnMiLCJzcGxpdCIsIm1heExlbmd0aCIsInN1ZmZpeCIsImlucHV0U3RyaW5nIiwicHJlZml4IiwiZG9DdXQiLCJzZWFyY2hTdHJpbmciLCJpbmRleE9mIiwiYmVmb3JlIiwiYWZ0ZXIiLCJzdHJpbmciLCJyZXN0TGVuZ3RoIiwiZW1wdHlPclByZWZpeCIsImVtcHR5T3JTdWZmaXgiLCJoYWxmTGVuZ3RoIiwicGllY2VPZkFmdGVyIiwicGllY2VPZkJlZm9yZSIsInJlc3RPZkFmdGVyIiwicmVzdE9mQmVmb3JlIiwicnVuIiwiJHJvb3RTY29wZSIsIiR3aW5kb3ciLCIkbG9jYXRpb24iLCIkb24iLCIkJGFjdHVhbFBhdGgiLCJwYXRoIiwibmV3TG9jYXRpb24iLCJpc0hpc3RvcnlDaGFuZ2VkIiwid2luZG93IiwicHJvdmlkZXIiLCJqc1JvdXRlcyIsIlJvdXRlcyIsIiRnZXQiLCJfdGhpcyIsIiRodHRwIiwiYWRkUm91dGVzIiwicGxheVJvdXRlcyIsIndyYXBIdHRwIiwiZm4iLCJhYnNvbHV0ZVVSTCIsImhvc3QiLCJodHRwTWV0aG9kIiwicmVzIiwicm91dGVPYmplY3QiLCJ1cmwiLCJhcHBseSIsIm1ldGhvZCIsIm1hdGNoIiwiJHJvdXRlIiwid2ViU29ja2V0VVJMIiwiYWpheCIsImFyZ3MiLCJjb25jYXQiLCJwbGF5Um91dGVzT2JqZWN0IiwianNSb3V0ZXNPYmplY3QiLCJrZXkiLCJnbG9iYWwiLCJkb2N1bWVudCIsInRhcmdldCIsImluYWN0aXZlT25jZSIsInRyYWNraW5nIiwicG9zaXRpb25zIiwibWF4VHJ5Q291bnQiLCJ3aGV0aGVyU2Nyb2xsRXZhbHVhdG9yIiwiaXNEZWxheWVkRXZhbHVhdG9yIiwiJHJldGFpblNjcm9sbCIsIiRpbmplY3RvciIsIiR0YXJnZXQiLCJvbiIsInNjcm9sbFRvcCIsImUiLCJjYW5jZWxTY3JvbGxpbmciLCJpc0NhbmNlbCIsIm9mZlNjb3BlRGVzdHJveSIsIm9mZlNjcm9sbENhbmNlbGVyIiwib25TY3JvbGxDYW5jZWxlciIsImludm9rZSIsImNvbnNvbGUiLCJsb2ciLCJ0YXJnZXRTY29wZSIsIm9mZiIsIiRpZCIsIm9uZSIsInRyeUNvdW50IiwidHJ5U2Nyb2xsIiwiU2VhcmNoRm9ybSIsIm9wdGlvbnMxIiwiYWN0aW9uIiwiZXh0ZW5kIiwiZGVmYXVsdHMiLCJwcmVTdWJtaXQiLCJmb3JtIiwiZmlsdGVycyIsInVuZmlsdGVycyIsInByZVJlc2V0Iiwic3VibWl0IiwicmVzZXQiLCJjdXJyZW50IiwiY29weSIsInByb3RvdHlwZSIsImlzUHJpc3RpbmUiLCJlcXVhbHMiLCJpc0RpcnR5IiwiaXNDaGFuZ2VkIiwiYmFzZTEiLCJiYXNlMiIsImlzRmlsdGVyZWQiLCJldmVyeSIsImtleVdpdGhWYWx1ZSIsIiRzZXRQcmlzdGluZSIsInBhcmFtcyIsInJlZnJlc2giLCJpc09iamVjdCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxHQUFBLGdCQUFBQyxVQUFBLGdCQUFBQyxRQUNBQSxPQUFBRCxRQUFBRCxFQUFBRyxRQUFBLFVBQUFBLFFBQUEsZ0JBQ0EsSUFBQSxrQkFBQUMsU0FBQUEsT0FBQUMsSUFDQUQsUUFBQSxTQUFBLFdBQUFKLE9BQ0EsQ0FDQSxHQUFBTSxHQUFBLGdCQUFBTCxTQUFBRCxFQUFBRyxRQUFBLFVBQUFBLFFBQUEsWUFBQUgsRUFBQUQsRUFBQSxPQUFBQSxFQUFBLFFBQ0EsS0FBQSxHQUFBUSxLQUFBRCxJQUFBLGdCQUFBTCxTQUFBQSxRQUFBRixHQUFBUSxHQUFBRCxFQUFBQyxLQUVDQyxLQUFBLFNBQUFDLEVBQUFDLEdBQ0QsTUNBZ0IsVUFBVUMsR0NOMUIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFaLE9BR0EsSUFBQUMsR0FBQVksRUFBQUQsSUFDQVosV0FDQWMsR0FBQUYsRUFDQUcsUUFBQSxFQVVBLE9BTkFMLEdBQUFFLEdBQUFJLEtBQUFmLEVBQUFELFFBQUFDLEVBQUFBLEVBQUFELFFBQUFXLEdBR0FWLEVBQUFjLFFBQUEsRUFHQWQsRUFBQUQsUUF2QkEsR0FBQWEsS0FxQ0EsT0FUQUYsR0FBQU0sRUFBQVAsRUFHQUMsRUFBQU8sRUFBQUwsRUFHQUYsRUFBQVEsRUFBQSxHQUdBUixFQUFBLEtEZ0JNLFNBQVNWLEVBQVFELEVBQVNXLElFdERoQyxTQUFBUyxHQUFBLFlGMERDVCxHRXhETSxHRjBETkEsRUV6RE0sR0YyRE5BLEVFMURNLEdGNEROQSxFRTNE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LEdBQVEyTyxTQUFTRCxLQUE1RHBKLEdBQXVCb0osR0FBUyxHQUEvQnRCLEVBQUE5SCxFQUFBLEdBQVVvSixFQUFBcEosRUFBQSxJQUVYbUosRUFBWUMsS0FBVyxFQUNyQjFPLEVBQVE2TixLQUFLMU8sS0FBQ3lPLFNBRWQ1TixFQUFRNk4sS0FBSzFPLEtBQUNtTyxLQUFPdE4sRUFBUTZOLEtBQUsxTyxLQUFDeU8sU0FFckMsS0FBQTFDLElBQUEvTCxNQUFBcUksUUFBQTRGLFNBQ21EcE4sRUFBUStFLFFBQVEwSixFQUFPdkQsTUFBeEV1RCxFQUFPdkQsR0FBT3VELEVBQU92RCxHQUFLckcsT0FBTyxTQUFDNUYsR3JCZzRCekIsUXFCaDRCaUNBLElBSTVDLElBRkF3UCxFQUFTek8sRUFBUW1OLE9BQU9zQixFQUFRek8sRUFBUTZOLEtBQUtULElBRTFDcE4sRUFBUXdHLFdBQVdySCxLQUFDcUksUUFBUWhELFdBQzdCLElBQUEwRyxJQUFBdUQsR3JCazRCT3pNLEVBQVF5TSxFQUFPdkQsR3FCbDRCdEJ1RCxFQUFPdkQsR0FBTy9MLEtBQUNxSSxRQUFRaEQsVUFBVTBHLEVBQUtsSixFckJzNEJuQyxPcUJwNEJMeU0sSXJCdTRCVXpCLE1xQnI0QkN4RixTckI2NEJhNUgsS0FBS2hCLEVBQVNXLEVBQW9CIiwiZmlsZSI6ImFuZ3VsYXItZXh0ZW5kcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJqcXVlcnlcIiksIHJlcXVpcmUoXCJhbmd1bGFyXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImpxdWVyeVwiLCBcImFuZ3VsYXJcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGZhY3RvcnkocmVxdWlyZShcImpxdWVyeVwiKSwgcmVxdWlyZShcImFuZ3VsYXJcIikpIDogZmFjdG9yeShyb290W1wialF1ZXJ5XCJdLCByb290W1wiYW5ndWxhclwiXSk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzRfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV81X18pIHtcbnJldHVybiBcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb25cbiAqKi8iLG51bGwsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgNGQwYjQ4ODc4MTY4YzdkMjNmZmJcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAnLi9kaXJlY3RpdmVzL2NvdW50VG8uY29mZmVlJ1xuaW1wb3J0ICcuL2RpcmVjdGl2ZXMvZG9tSW5pdC5jb2ZmZWUnXG5pbXBvcnQgJy4vZGlyZWN0aXZlcy9mb2N1c01lLmNvZmZlZSdcbmltcG9ydCAnLi9kaXJlY3RpdmVzL2xvd2VyLmNvZmZlZSdcbmltcG9ydCAnLi9kaXJlY3RpdmVzL3JlcGVhdERvbmUuY29mZmVlJ1xuaW1wb3J0ICcuL2RpcmVjdGl2ZXMvcm90YXRlMmQuY29mZmVlJ1xuaW1wb3J0ICcuL2RpcmVjdGl2ZXMvdXBwZXIuY29mZmVlJ1xuaW1wb3J0ICcuL2ZpbHRlcnMvYXJyYXlzLmNvZmZlZSdcbmltcG9ydCAnLi9maWx0ZXJzL3N0cmluZ3MuY29mZmVlJ1xuaW1wb3J0ICcuL3NlcnZpY2VzL2xvY2F0aW9uU3RhdGUuY29mZmVlJ1xuaW1wb3J0ICcuL3NlcnZpY2VzL3BsYXlSb3V0ZXMuY29mZmVlJ1xuaW1wb3J0ICcuL3NlcnZpY2VzL3JldGFpblNjcm9sbC5jb2ZmZWUnXG5pbXBvcnQgJy4vc2VydmljZXMvc2VhcmNoRm9ybS5jb2ZmZWUnXG5cbmFuZ3VsYXIubW9kdWxlKCduZ0V4dGVuZHMuZGlyZWN0aXZlcycsIFtcbiAgICAnbmdFeHRlbmRzLmRpcmVjdGl2ZXMuY291bnRUbycsXG4gICAgJ25nRXh0ZW5kcy5kaXJlY3RpdmVzLmRvbUluaXQnLFxuICAgICduZ0V4dGVuZHMuZGlyZWN0aXZlcy5mb2N1c01lJyxcbiAgICAnbmdFeHRlbmRzLmRpcmVjdGl2ZXMubG93ZXInLFxuICAgICduZ0V4dGVuZHMuZGlyZWN0aXZlcy5yZXBlYXREb25lJyxcbiAgICAnbmdFeHRlbmRzLmRpcmVjdGl2ZXMucm90YXRlMmQnLFxuICAgICduZ0V4dGVuZHMuZGlyZWN0aXZlcy51cHBlcidcbl0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnbmdFeHRlbmRzLmZpbHRlcnMnLCBbXG4gICAgJ25nRXh0ZW5kcy5maWx0ZXJzLmFycmF5cycsXG4gICAgJ25nRXh0ZW5kcy5maWx0ZXJzLnN0cmluZ3MnXG5dKTtcblxuYW5ndWxhci5tb2R1bGUoJ25nRXh0ZW5kcy5zZXJ2aWNlcycsIFtcbiAgICAnbmdFeHRlbmRzLnNlcnZpY2VzLnBsYXlSb3V0ZXMnLFxuICAgICduZ0V4dGVuZHMuc2VydmljZXMuc2VhcmNoRm9ybSdcbl0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnbmdFeHRlbmRzJywgW1xuICAgICduZ0V4dGVuZHMuZGlyZWN0aXZlcycsXG4gICAgJ25nRXh0ZW5kcy5maWx0ZXJzJyxcbiAgICAnbmdFeHRlbmRzLnNlcnZpY2VzJ1xuXSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9pbmRleC5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcidcblxuaWYgKCEkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQW5ndWxhci5leHRlbmRzIHJlcXVpcmVzIGEgQW5ndWxhckpTXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFuZ3VsYXI7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy92YXJzL2FuZ3VsYXIuanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcblxuaWYgKCEkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQW5ndWxhci5leHRlbmRzIHJlcXVpcmVzIGEgalF1ZXJ5XCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICQ7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy92YXJzL2pxdWVyeS5qc1xuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59O1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdC5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV80X187XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCB7XCJyb290XCI6XCJqUXVlcnlcIixcImNvbW1vbmpzXCI6XCJqcXVlcnlcIixcImNvbW1vbmpzMlwiOlwianF1ZXJ5XCIsXCJhbWRcIjpcImpxdWVyeVwifVxuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV81X187XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiBleHRlcm5hbCBcImFuZ3VsYXJcIlxuICoqIG1vZHVsZSBpZCA9IDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0J1xuXG5hbmd1bGFyLm1vZHVsZSAnbmdFeHRlbmRzLmRpcmVjdGl2ZXMuY291bnRUbycsIFtdXG5cbi5kaXJlY3RpdmUgJ2V4Q291bnRUbycsIFsnJHRpbWVvdXQnLCAoJHRpbWVvdXQpIC0+XG4gIHJlcGxhY2U6IGZhbHNlXG4gIHNjb3BlOiB0cnVlXG4gIGxpbms6IChzY29wZSwgZWxlbWVudCwgYXR0cnMpIC0+XG4gICAgZWxlbSA9IGVsZW1lbnRbMF1cbiAgICBudW0gPSBudWxsXG4gICAgcmVmcmVzaEludGVydmFsID0gbnVsbFxuICAgIHN0ZXBzID0gbnVsbFxuICAgIHN0ZXAgPSBudWxsXG4gICAgY291bnRUbyA9IG51bGxcbiAgICBpbmNyZW1lbnQgPSBudWxsXG5cbiAgICBjYWxjdWxhdGUgPSAtPlxuICAgICAgcmVmcmVzaEludGVydmFsID0gMzBcbiAgICAgIHN0ZXAgPSAwXG4gICAgICBzY29wZS50aW1vdXRJZCA9IG51bGxcbiAgICAgIGNvdW50VG8gPSBwYXJzZUludChhdHRycy5leENvdW50VG8pIHx8IDBcbiAgICAgIHNjb3BlLnZhbHVlID0gcGFyc2VJbnQoYXR0cnMudmFsdWUsIDEwKSB8fCAwXG4gICAgICBkdXJhdGlvbiA9IChwYXJzZUZsb2F0KGF0dHJzLmR1cmF0aW9uKSAqIDEwMDApIHx8IDBcblxuICAgICAgc3RlcHMgPSBNYXRoLmNlaWwoZHVyYXRpb24gLyByZWZyZXNoSW50ZXJ2YWwpXG4gICAgICBpbmNyZW1lbnQgPSAoY291bnRUbyAtIHNjb3BlLnZhbHVlKSAvIHN0ZXBzXG4gICAgICBudW0gPSBzY29wZS52YWx1ZVxuICAgICAgcmV0dXJuXG5cbiAgICB0aWNrID0gLT5cbiAgICAgIHNjb3BlLnRpbW91dElkID0gJHRpbWVvdXQoLT5cbiAgICAgICAgbnVtICs9IGluY3JlbWVudFxuICAgICAgICBzdGVwKytcbiAgICAgICAgaWYgc3RlcCA+PSBzdGVwc1xuICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChzY29wZS50aW1vdXRJZClcbiAgICAgICAgICBudW0gPSBjb3VudFRvXG4gICAgICAgICAgZWxlbS50ZXh0Q29udGVudCA9IGNvdW50VG9cbiAgICAgICAgZWxzZVxuICAgICAgICAgIGVsZW0udGV4dENvbnRlbnQgPSBNYXRoLnJvdW5kKG51bSlcbiAgICAgICAgICB0aWNrKClcbiAgICAgICwgcmVmcmVzaEludGVydmFsKVxuICAgICAgcmV0dXJuXG5cbiAgICBzdGFydCA9IC0+XG4gICAgICAkdGltZW91dC5jYW5jZWwoc2NvcGUudGltb3V0SWQpICBpZiBzY29wZS50aW1vdXRJZD9cbiAgICAgIGNhbGN1bGF0ZSgpXG4gICAgICB0aWNrKClcbiAgICAgIHJldHVyblxuXG4gICAgYXR0cnMuJG9ic2VydmUgJ2V4Q291bnRUbycsICh2YWwpIC0+IHN0YXJ0KCkgIGlmIHZhbD9cbiAgICBhdHRycy4kb2JzZXJ2ZSAndmFsdWUnLCAtPiBzdGFydCgpXG4gICAgcmV0dXJuXG5dXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZGlyZWN0aXZlcy9jb3VudFRvLmNvZmZlZVxuICoqLyIsIid1c2Ugc3RyaWN0J1xuXG5hbmd1bGFyLm1vZHVsZSAnbmdFeHRlbmRzLmRpcmVjdGl2ZXMuZG9tSW5pdCcsIFtdXG5cbi5kaXJlY3RpdmUgJ2V4RG9tSW5pdCcsIFstPlxuICByZXN0cmljdDogJ0EnLFxuICBsaW5rOiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSAtPlxuICAgIGF0dHJzLiRvYnNlcnZlICdleERvbUluaXQnLCAodmFsdWUpIC0+IHNjb3BlLiRldmFsKHZhbHVlKT8oZWxlbWVudClcbiAgICByZXR1cm5cbl1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9kaXJlY3RpdmVzL2RvbUluaXQuY29mZmVlXG4gKiovIiwiJ3VzZSBzdHJpY3QnXG5cbmFuZ3VsYXIubW9kdWxlICduZ0V4dGVuZHMuZGlyZWN0aXZlcy5mb2N1c01lJywgW11cblxuLmRpcmVjdGl2ZSAnZXhGb2N1c01lJywgWy0+XG4gIHNjb3BlOlxuICAgIHRyaWdnZXI6ICc9ZXhGb2N1c01lJ1xuICBsaW5rOiAoc2NvcGUsIGVsZW1lbnQpIC0+XG4gICAgc2NvcGUuJHdhdGNoICd0cmlnZ2VyJywgKHZhbHVlKSAtPlxuICAgICAgaWYgdHlwZW9mIHZhbHVlIGlzICdib29sZWFuJ1xuICAgICAgICBlbGVtZW50W2lmIHZhbHVlIHRoZW4gJ2ZvY3VzJyBlbHNlICdibHVyJ10/KClcbiAgICAgICAgc2NvcGUudHJpZ2dlciA9IG51bGxcbiAgICAgIHJldHVyblxuICAgIHJldHVyblxuXVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2RpcmVjdGl2ZXMvZm9jdXNNZS5jb2ZmZWVcbiAqKi8iLCIndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUgJ25nRXh0ZW5kcy5kaXJlY3RpdmVzLmxvd2VyJywgW11cblxuLmRpcmVjdGl2ZSAnZXhMb3dlcicsIFstPlxuICByZXF1aXJlOiAnbmdNb2RlbCdcbiAgbGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbW9kZWxDdHJsKSAtPlxuICAgIHRvTG93ZXIgPSAoaW5wdXRWYWx1ZSkgLT5cbiAgICAgIGxvd2VyZWQgPSBpZiBpbnB1dFZhbHVlIHRoZW4gaW5wdXRWYWx1ZS50b0xvd2VyQ2FzZSgpIGVsc2UgaW5wdXRWYWx1ZVxuICAgICAgdW5sZXNzIGxvd2VyZWQgaXMgaW5wdXRWYWx1ZVxuICAgICAgICBlbGVtID0gZWxlbWVudFswXVxuICAgICAgICBzdGFydCA9IGVsZW0uc2VsZWN0aW9uU3RhcnRcbiAgICAgICAgZW5kID0gZWxlbS5zZWxlY3Rpb25FbmRcbiAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUgbG93ZXJlZFxuICAgICAgICBtb2RlbEN0cmwuJHJlbmRlcigpXG4gICAgICAgIGVsZW0uc2V0U2VsZWN0aW9uUmFuZ2U/KHN0YXJ0LCBlbmQpXG4gICAgICBsb3dlcmVkXG5cbiAgICBtb2RlbEN0cmwuJHBhcnNlcnMucHVzaCB0b0xvd2VyXG4gICAgdG9Mb3dlciBzY29wZVthdHRycy5uZ01vZGVsXVxuICAgIHJldHVyblxuXVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZGlyZWN0aXZlcy9sb3dlci5jb2ZmZWVcbiAqKi8iLCIndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUgJ25nRXh0ZW5kcy5kaXJlY3RpdmVzLnJlcGVhdERvbmUnLCBbXVxuXG4uZGlyZWN0aXZlICdleFJlcGVhdERvbmUnLCBbLT5cbiAgcmVzdHJpY3Q6ICdBJyxcbiAgbGluazogKHNjb3BlLCBlbGVtZW50LCBhdHRycykgLT5cbiAgICBpZiAoYXR0cnMubmdSZXBlYXQ/IG9yIGF0dHJzLm5nUmVwZWF0U3RhcnQ/KSBhbmQgc2NvcGUuJGxhc3RcbiAgICAgIGF0dHJzLiRvYnNlcnZlICdleFJlcGVhdERvbmUnLCAodmFsdWUpIC0+IHNjb3BlLiRldmFsKHZhbHVlKT8oZWxlbWVudClcbiAgICByZXR1cm5cbl1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9kaXJlY3RpdmVzL3JlcGVhdERvbmUuY29mZmVlXG4gKiovIiwiJ3VzZSBzdHJpY3QnXG5cbmFuZ3VsYXIubW9kdWxlICduZ0V4dGVuZHMuZGlyZWN0aXZlcy5yb3RhdGUyZCcsIFtdXG5cbi5kaXJlY3RpdmUgJ2V4Um90YXRlMmQnLCBbLT5cbiAgc2NvcGU6XG4gICAgdmFsdWU6ICc9ZXhSb3RhdGUyZCdcbiAgICBsaW1pdDogJz0nXG4gICAgYW5nbGU6ICc9J1xuICBsaW5rOiAoc2NvcGUsIGVsZW1lbnQpIC0+XG4gICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbiAnW3ZhbHVlLCBsaW1pdCwgYW5nbGVdJywgKHZhbHVlcykgLT5cbiAgICAgIHZhbHVlID0gdmFsdWVzWzBdIG9yIDBcbiAgICAgIGxpbWl0ID0gdmFsdWVzWzFdIG9yIDEwXG4gICAgICBhbmdsZSA9IHZhbHVlc1syXSBvciAzNjBcbiAgICAgIGRlZ3JlZSA9IHZhbHVlICogYW5nbGUgLyBsaW1pdFxuICAgICAgZWxlbWVudC5jc3NcbiAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3JvdGF0ZSgnICsgZGVncmVlICsgJ2RlZyknXG4gICAgICAgICctbW96LXRyYW5zZm9ybSc6ICdyb3RhdGUoJyArIGRlZ3JlZSArICdkZWcpJ1xuICAgICAgICAndHJhbnNmb3JtJzogJ3JvdGF0ZSgnICsgZGVncmVlICsgJ2RlZyknXG4gICAgICByZXR1cm5cbiAgICByZXR1cm5cbl1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9kaXJlY3RpdmVzL3JvdGF0ZTJkLmNvZmZlZVxuICoqLyIsIid1c2Ugc3RyaWN0J1xuXG5hbmd1bGFyLm1vZHVsZSAnbmdFeHRlbmRzLmRpcmVjdGl2ZXMudXBwZXInLCBbXVxuXG4uZGlyZWN0aXZlICdleFVwcGVyJywgWy0+XG4gIHJlcXVpcmU6ICduZ01vZGVsJ1xuICBsaW5rOiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBtb2RlbEN0cmwpIC0+XG4gICAgdG9VcHBlciA9IChpbnB1dFZhbHVlKSAtPlxuICAgICAgdXBwZXJlZCA9IGlmIGlucHV0VmFsdWUgdGhlbiBpbnB1dFZhbHVlLnRvVXBwZXJDYXNlKCkgZWxzZSBpbnB1dFZhbHVlXG4gICAgICB1bmxlc3MgdXBwZXJlZCBpcyBpbnB1dFZhbHVlXG4gICAgICAgIGVsZW0gPSBlbGVtZW50WzBdXG4gICAgICAgIHN0YXJ0ID0gZWxlbS5zZWxlY3Rpb25TdGFydFxuICAgICAgICBlbmQgPSBlbGVtLnNlbGVjdGlvbkVuZFxuICAgICAgICBtb2RlbEN0cmwuJHNldFZpZXdWYWx1ZSB1cHBlcmVkXG4gICAgICAgIG1vZGVsQ3RybC4kcmVuZGVyKClcbiAgICAgICAgZWxlbS5zZXRTZWxlY3Rpb25SYW5nZT8oc3RhcnQsIGVuZClcbiAgICAgIHVwcGVyZWRcblxuICAgIG1vZGVsQ3RybC4kcGFyc2Vycy5wdXNoIHRvVXBwZXJcbiAgICB0b1VwcGVyIHNjb3BlW2F0dHJzLm5nTW9kZWxdXG4gICAgcmV0dXJuXG5dXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9kaXJlY3RpdmVzL3VwcGVyLmNvZmZlZVxuICoqLyIsIid1c2Ugc3RyaWN0J1xuXG5hbmd1bGFyLm1vZHVsZSAnbmdFeHRlbmRzLmZpbHRlcnMuYXJyYXlzJywgW11cblxuLmZpbHRlciAnbWFrZUFycmF5JywgWy0+IChpbnB1dCkgLT4gaWYgYW5ndWxhci5pc0FycmF5IGlucHV0IHRoZW4gaW5wdXQgZWxzZSAkLm1ha2VBcnJheShpbnB1dCldXG5cbi5maWx0ZXIgJ3JhbmdlJywgWy0+IChmcm9tLCB0bywgc3RlcCA9IDEpIC0+XG4gIGlzTnVtYmVyID0gdHlwZW9mIGZyb20gaXMgJ251bWJlcicgYW5kIHR5cGVvZiB0byBpcyAnbnVtYmVyJ1xuICBiZWdpbiA9IGlmIGlzTnVtYmVyIHRoZW4gZnJvbSBlbHNlIGZyb20udG9TdHJpbmcoKS5jaGFyQ29kZUF0KDApXG4gIGVuZCA9IGlmIGlzTnVtYmVyIHRoZW4gdG8gZWxzZSB0by50b1N0cmluZygpLmNoYXJDb2RlQXQoMClcbiAgZm9yIGkgaW4gW2JlZ2luLi5lbmRdIGJ5IChpZiBiZWdpbiA+IGVuZCB0aGVuIC1zdGVwIGVsc2Ugc3RlcClcbiAgICBpZiBpc051bWJlciB0aGVuIGkgZWxzZSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXG5dXG5cbi5maWx0ZXIgJ2pvaW4nLCBbLT4gKGlucHV0LCBzZXApIC0+ICQubWFrZUFycmF5KGlucHV0KS5qb2luKHNlcCldXG5cbi5maWx0ZXIgJ2NvbWJpbmUnLCBbJyRwYXJzZScsICgkcGFyc2UpIC0+IChpbnB1dCwgdHJhbnNmb3JtZXJzLi4uKSAtPlxuICBpbnB1dCA9IFtpbnB1dF0gIHVubGVzcyBhbmd1bGFyLmlzQXJyYXkgaW5wdXRcbiAgKGZvciB2YWx1ZSBpbiBpbnB1dFxuICAgIGZvciB0IGluIHRyYW5zZm9ybWVyc1xuICAgICAgaWYgYW5ndWxhci5pc0Z1bmN0aW9uIHRcbiAgICAgICAgdmFsdWUgPSB0KHZhbHVlKVxuICAgICAgZWxzZSBpZiB0eXBlb2YgdCBpcyAnc3RyaW5nJ1xuICAgICAgICB2YWx1ZSA9IHN3aXRjaCB0XG4gICAgICAgICAgd2hlbiAnPWludGVnZXInIHRoZW4gcGFyc2VJbnQodmFsdWUpXG4gICAgICAgICAgd2hlbiAnPWZsb2F0JyAgIHRoZW4gcGFyc2VGbG9hdCh2YWx1ZSlcbiAgICAgICAgICBlbHNlICRwYXJzZSh0KSh2YWx1ZSlcbiAgICB2YWx1ZVxuICApLnJlZHVjZSAodCwgdikgLT4gdCArIHZcbl1cblxuLmZpbHRlciAnbGltaXQnLCBbLT4gKGlucHV0LCBwYWdlLCBpdGVtc1BlclBhZ2UpIC0+XG4gIGZyb20gPSAocGFnZSAtIDEpICogaXRlbXNQZXJQYWdlXG4gIHRvID0gZnJvbSArIGl0ZW1zUGVyUGFnZVxuICAkLm1ha2VBcnJheShpbnB1dClbZnJvbS4uLnRvXVxuXVxuXG4uZmlsdGVyICd0cmltJywgWy0+IChpbnB1dCkgLT5cbiAgaWYgYW5ndWxhci5pc0FycmF5IGlucHV0XG4gICAgYT8udG9TdHJpbmc/KCk/LnRyaW0/KCkgIGZvciBhIGluIGlucHV0XG4gIGVsc2VcbiAgICBpbnB1dD8udG9TdHJpbmc/KCk/LnRyaW0/KClcbl1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9maWx0ZXJzL2FycmF5cy5jb2ZmZWVcbiAqKi8iLCIndXNlIHN0cmljdCdcblxuYW5ndWxhci5tb2R1bGUgJ25nRXh0ZW5kcy5maWx0ZXJzLnN0cmluZ3MnLCBbXVxuXG4uZmlsdGVyICd0cnVzdEFzJywgWyckc2NlJywgKCRzY2UpIC0+IChpbnB1dCwgdHlwZSkgLT4gJHNjZS50cnVzdEFzKHR5cGUsIGlucHV0KV1cbi5maWx0ZXIgJ3RydXN0QXNDc3MnLCBbJyRzY2UnLCAoJHNjZSkgLT4gJHNjZS50cnVzdEFzQ3NzXVxuLmZpbHRlciAndHJ1c3RBc0h0bWwnLCBbJyRzY2UnLCAoJHNjZSkgLT4gJHNjZS50cnVzdEFzSHRtbF1cbi5maWx0ZXIgJ3RydXN0QXNKcycsIFsnJHNjZScsICgkc2NlKSAtPiAkc2NlLnRydXN0QXNKc11cbi5maWx0ZXIgJ3RydXN0QXNSZXNvdXJjZVVybCcsIFsnJHNjZScsICgkc2NlKSAtPiAkc2NlLnRydXN0QXNSZXNvdXJjZVVybF1cbi5maWx0ZXIgJ3RydXN0QXNVcmwnLCBbJyRzY2UnLCAoJHNjZSkgLT4gJHNjZS50cnVzdEFzVXJsXVxuXG4uZmlsdGVyICdyZXBsYWNlJywgWy0+IChpbnB1dCwgc2VhcmNoLCByZXBsYWNlbWVudCwgb3B0aW9ucykgLT5cbiAgc2VhcmNoID0gbmV3IFJlZ0V4cCgoc2VhcmNoIG9yICcnKS50b1N0cmluZygpLCBvcHRpb25zKSAgdW5sZXNzIHNlYXJjaCBpbnN0YW5jZW9mIFJlZ0V4cFxuICAoaW5wdXQgb3IgJycpLnRvU3RyaW5nKCkucmVwbGFjZShzZWFyY2gsIHJlcGxhY2VtZW50KVxuXVxuXG4uZmlsdGVyICdubDJicicsIFstPiAoaW5wdXQpIC0+IChpbnB1dCBvciAnJykudG9TdHJpbmcoKS5yZXBsYWNlKC8oXFxyXFxufFxcblxccnxcXHJ8XFxuKS9nLCAnPGJyLz4nKV1cblxuLmZpbHRlciAnYnIybmwnLCBbLT4gKGlucHV0KSAtPiAoaW5wdXQgb3IgJycpLnRvU3RyaW5nKCkucmVwbGFjZSgvKDxicj58PGJyXFwvPikvZywgJ1xcbicpXVxuXG4uZmlsdGVyICdzcGFjZTJuYnNwJywgWy0+IChpbnB1dCkgLT4gKGlucHV0IG9yICcnKS50b1N0cmluZygpLnJlcGxhY2UoL1xccy9nLCAnJm5ic3A7JyldXG5cbi5maWx0ZXIgJ25ic3Ayc3BhY2UnLCBbLT4gKGlucHV0KSAtPiAoaW5wdXQgb3IgJycpLnRvU3RyaW5nKCkucmVwbGFjZSgvJm5ic3A7L2csICcgJyldXG5cbi5maWx0ZXIgJ3NwbGl0JywgWy0+IChpbnB1dCwgc2VwYXJhdG9ycywgbGltaXQpIC0+XG4gIHVubGVzcyBpbnB1dD8gdGhlbiBpbnB1dFxuICBlbHNlIGlucHV0LnRvU3RyaW5nKCkuc3BsaXQobmV3IFJlZ0V4cChcbiAgICAoaWYgYW5ndWxhci5pc0FycmF5IHNlcGFyYXRvcnMgdGhlbiBzZXBhcmF0b3JzLmpvaW4oJ3wnKSBlbHNlIHNlcGFyYXRvcnMpLnRvU3RyaW5nKClcbiAgKSwgbGltaXQpXG5dXG5cbi5maWx0ZXIgJ2N1dHN0cmluZycsIFstPiAoaW5wdXQsIG1heExlbmd0aCA9IDEwLCBzdWZmaXggPSAnLi4uJykgLT5cbiAgdW5sZXNzIGlucHV0PyB0aGVuIGlucHV0XG4gIGVsc2VcbiAgICBpbnB1dFN0cmluZyA9IGlucHV0LnRvU3RyaW5nKClcbiAgICBpbnB1dFN0cmluZyA9IGlucHV0U3RyaW5nWzAuLi5tYXhMZW5ndGhdICsgc3VmZml4ICBpZiBpbnB1dFN0cmluZy5sZW5ndGggPiBtYXhMZW5ndGggLSBzdWZmaXgubGVuZ3RoXG4gICAgaW5wdXRTdHJpbmdcbl1cblxuLmZpbHRlciAncm91bmRjdXRzdHJpbmcnLCBbLT4gKGlucHV0LCBzZWFyY2gsIG1heExlbmd0aCA9IDIwLCBwcmVmaXggPSAnLi4uJywgc3VmZml4ID0gJy4uLicpIC0+XG4gIHVubGVzcyBpbnB1dD8gdGhlbiBpbnB1dFxuICBlbHNlXG4gICAgaW5wdXRTdHJpbmcgPSBpbnB1dC50b1N0cmluZygpXG4gICAgc2VhcmNoU3RyaW5nID0gKHNlYXJjaCBvciAnJykudG9TdHJpbmcoKVxuICAgIGkgPSBpbnB1dFN0cmluZy5pbmRleE9mKHNlYXJjaFN0cmluZylcbiAgICBpZiBpIGlzIC0xXG4gICAgICBpbnB1dFN0cmluZyA9IGlucHV0U3RyaW5nWzAuLi5tYXhMZW5ndGhdICsgc3VmZml4ICBpZiBpbnB1dFN0cmluZy5sZW5ndGggPiBtYXhMZW5ndGggLSBzdWZmaXgubGVuZ3RoXG4gICAgICBpbnB1dFN0cmluZ1xuICAgIGVsc2VcbiAgICAgIChkb0N1dCA9IChiZWZvcmUsIGFmdGVyLCBzdHJpbmcsIHJlc3RMZW5ndGgpIC0+XG4gICAgICAgIGlmIHJlc3RMZW5ndGggPD0gMCBvciBiZWZvcmUubGVuZ3RoIGlzIDAgYW5kIGFmdGVyLmxlbmd0aCBpcyAwXG4gICAgICAgICAgZW1wdHlPclByZWZpeCA9IGlmIGJlZm9yZS5sZW5ndGggPiAwIHRoZW4gcHJlZml4IGVsc2UgJydcbiAgICAgICAgICBlbXB0eU9yU3VmZml4ID0gaWYgYWZ0ZXIubGVuZ3RoID4gMCB0aGVuIHN1ZmZpeCBlbHNlICcnXG4gICAgICAgICAgZW1wdHlPclByZWZpeCArIHN0cmluZyArIGVtcHR5T3JTdWZmaXhcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGhhbGZMZW5ndGggPSByZXN0TGVuZ3RoIC8gMlxuICAgICAgICAgIGlmIGhhbGZMZW5ndGggPCAxXG4gICAgICAgICAgICBkb0N1dChiZWZvcmVbMC4uLi0xXSwgYWZ0ZXIsIGJlZm9yZVstMS4uLl0gKyBzdHJpbmcsIDApXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcGllY2VPZkJlZm9yZSA9IGJlZm9yZVstaGFsZkxlbmd0aC4uLl1cbiAgICAgICAgICAgIHBpZWNlT2ZBZnRlciA9IGFmdGVyWzAuLi5oYWxmTGVuZ3RoXVxuICAgICAgICAgICAgcmVzdE9mQmVmb3JlID0gYmVmb3JlWzAuLi4taGFsZkxlbmd0aF1cbiAgICAgICAgICAgIHJlc3RPZkFmdGVyID0gYWZ0ZXJbaGFsZkxlbmd0aC4uLl1cbiAgICAgICAgICAgIGRvQ3V0KFxuICAgICAgICAgICAgICByZXN0T2ZCZWZvcmUsXG4gICAgICAgICAgICAgIHJlc3RPZkFmdGVyLFxuICAgICAgICAgICAgICBwaWVjZU9mQmVmb3JlICsgc3RyaW5nICsgcGllY2VPZkFmdGVyLFxuICAgICAgICAgICAgICByZXN0TGVuZ3RoIC0gcGllY2VPZkJlZm9yZS5sZW5ndGggLSBwaWVjZU9mQWZ0ZXIubGVuZ3RoXG4gICAgICAgICAgICApXG4gICAgICApKFxuICAgICAgICBpbnB1dFN0cmluZ1swLi4uaV0sXG4gICAgICAgIGlucHV0U3RyaW5nW2kgKyBzZWFyY2hTdHJpbmcubGVuZ3RoLi4uXSxcbiAgICAgICAgc2VhcmNoU3RyaW5nLFxuICAgICAgICBtYXhMZW5ndGggLSBzZWFyY2hTdHJpbmcubGVuZ3RoIC0gcHJlZml4Lmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGhcbiAgICAgIClcbl1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9maWx0ZXJzL3N0cmluZ3MuY29mZmVlXG4gKiovIiwiJ3VzZSBzdHJpY3QnXG5cbmFuZ3VsYXIubW9kdWxlICduZ0V4dGVuZHMuc2VydmljZXMubG9jYXRpb25TdGF0ZScsIFtdXG5cbi5ydW4gW1xuICAnJHJvb3RTY29wZScsICckd2luZG93JywgJyRsb2NhdGlvbidcbiAgKCRyb290U2NvcGUsICR3aW5kb3csICRsb2NhdGlvbikgLT5cbiAgICAkcm9vdFNjb3BlLiRvbiAnJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcycsIC0+ICRsb2NhdGlvbi4kJGFjdHVhbFBhdGggPSAkbG9jYXRpb24ucGF0aCgpXG4gICAgJHJvb3RTY29wZS4kd2F0Y2ggKC0+ICRsb2NhdGlvbi5wYXRoKCkpLCAobmV3TG9jYXRpb24pIC0+ICRsb2NhdGlvbi5pc0hpc3RvcnlDaGFuZ2VkID0gJGxvY2F0aW9uLiQkYWN0dWFsUGF0aCBpcyBuZXdMb2NhdGlvblxuICAgIHJldHVyblxuXVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3NlcnZpY2VzL2xvY2F0aW9uU3RhdGUuY29mZmVlXG4gKiovIiwiJ3VzZSBzdHJpY3QnXG5cbmFuZ3VsYXIubW9kdWxlICduZ0V4dGVuZHMuc2VydmljZXMucGxheVJvdXRlcycsIFtdXG5cbi5wcm92aWRlciAnJHBsYXlSb3V0ZXMnLCBbLT5cbiAgQGpzUm91dGVzID0gd2luZG93LlJvdXRlc1xuICBAJGdldCA9IFtcbiAgICAnJGh0dHAnLCAnJGxvY2F0aW9uJ1xuICAgICgkaHR0cCwgJGxvY2F0aW9uKSA9PlxuICAgICAgd3JhcEh0dHAgPSAoZm4pIC0+IC0+XG4gICAgICAgIHJvdXRlT2JqZWN0ID0gZm4uYXBwbHkoQCwgYXJndW1lbnRzKVxuICAgICAgICBodHRwTWV0aG9kID0gcm91dGVPYmplY3QubWV0aG9kLnRvTG93ZXJDYXNlKClcbiAgICAgICAgYWJzb2x1dGVVUkwgPSByb3V0ZU9iamVjdC5hYnNvbHV0ZVVSTCgpXG4gICAgICAgIGhvc3QgPSBhYnNvbHV0ZVVSTC5tYXRjaCgvXmh0dHBzPzpcXC9cXC8oW15cXC8/I10rKSg/OltcXC8/I118JCkvaSk/WzFdXG4gICAgICAgIHVybCA9IGlmICRsb2NhdGlvbi5ob3N0KCkgaXMgaG9zdCB0aGVuIHJvdXRlT2JqZWN0LnVybCBlbHNlIGFic29sdXRlVVJMXG4gICAgICAgIHJlcyA9XG4gICAgICAgICAgJHJvdXRlOiByb3V0ZU9iamVjdFxuICAgICAgICAgIG1ldGhvZDogaHR0cE1ldGhvZFxuICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgYWJzb2x1dGVVUkw6IHJvdXRlT2JqZWN0LmFic29sdXRlVVJMXG4gICAgICAgICAgd2ViU29ja2V0VVJMOiByb3V0ZU9iamVjdC53ZWJTb2NrZXRVUkxcbiAgICAgICAgcmVzW2h0dHBNZXRob2RdID0gKGFyZ3MuLi4pIC0+XG4gICAgICAgICAgYWpheCA9ICRodHRwW2h0dHBNZXRob2RdXG4gICAgICAgICAgYWpheC5hcHBseShhamF4LCBbXS5jb25jYXQuY2FsbChbdXJsXSwgYXJncykpXG4gICAgICAgIHJlc1xuXG4gICAgICAoYWRkUm91dGVzID0gKHBsYXlSb3V0ZXNPYmplY3QsIGpzUm91dGVzT2JqZWN0KSAtPlxuICAgICAgICBmb3Iga2V5LCB2YWx1ZSBvZiBqc1JvdXRlc09iamVjdFxuICAgICAgICAgIGlmIGFuZ3VsYXIuaXNGdW5jdGlvbiB2YWx1ZVxuICAgICAgICAgICAgcGxheVJvdXRlc09iamVjdFtrZXldID0gd3JhcEh0dHAodmFsdWUpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcGxheVJvdXRlc09iamVjdFtrZXldID0ge30gIHVubGVzcyBrZXkgb2YgcGxheVJvdXRlc09iamVjdFxuICAgICAgICAgICAgYWRkUm91dGVzKHBsYXlSb3V0ZXNPYmplY3Rba2V5XSwgdmFsdWUpXG4gICAgICAgIHJldHVyblxuICAgICAgKShwbGF5Um91dGVzID0ge30sIEBqc1JvdXRlcylcbiAgICAgIHBsYXlSb3V0ZXNcbiAgXVxuICByZXR1cm5cbl1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9zZXJ2aWNlcy9wbGF5Um91dGVzLmNvZmZlZVxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKCFnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbmd1bGFyLmV4dGVuZHMgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3ZhcnMvd2luZG93LmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnXG5cbnJlcXVpcmUoJy4vbG9jYXRpb25TdGF0ZS5jb2ZmZWUnKVxuXG5hbmd1bGFyLm1vZHVsZSAnbmdFeHRlbmRzLnNlcnZpY2VzLnJldGFpblNjcm9sbCcsIFsnbmdFeHRlbmRzLnNlcnZpY2VzLmxvY2F0aW9uU3RhdGUnXVxuXG4ucHJvdmlkZXIgJyRyZXRhaW5TY3JvbGwnLCBbLT5cbiAgQHRhcmdldCA9IG51bGxcbiAgQGluYWN0aXZlT25jZSA9IGZhbHNlXG4gIEB0cmFja2luZyA9IGZhbHNlXG4gIEBwb3NpdGlvbnMgPSB7fVxuICBAbWF4VHJ5Q291bnQgPSAxMFxuICBAd2hldGhlclNjcm9sbEV2YWx1YXRvciA9IFsnJGxvY2F0aW9uJywgKCRsb2NhdGlvbikgLT4gJGxvY2F0aW9uLmlzSGlzdG9yeUNoYW5nZWRdXG4gIEBpc0RlbGF5ZWRFdmFsdWF0b3IgPSBbLT4gZmFsc2VdXG4gIEAkZ2V0ID0gWy0+IEBdXG4gIHJldHVyblxuXVxuXG4ucnVuIFtcbiAgJyRyb290U2NvcGUnLCAnJHJldGFpblNjcm9sbCcsICckbG9jYXRpb24nLCAnJHRpbWVvdXQnLCAnJGluamVjdG9yJ1xuICAoJHJvb3RTY29wZSwgJHJldGFpblNjcm9sbCwgJGxvY2F0aW9uLCAkdGltZW91dCwgJGluamVjdG9yKSAtPlxuICAgICR0YXJnZXQgPSAkKCRyZXRhaW5TY3JvbGwudGFyZ2V0IG9yIHdpbmRvdylcbiAgICAkdGFyZ2V0Lm9uICdzY3JvbGwnLCAtPiAkcmV0YWluU2Nyb2xsLnBvc2l0aW9uc1skbG9jYXRpb24udXJsKCldID0gJHRhcmdldC5zY3JvbGxUb3AoKSAgaWYgJHJldGFpblNjcm9sbC50cmFja2luZ1xuXG4gICAgJHJvb3RTY29wZS4kb24gJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCAtPiAkcmV0YWluU2Nyb2xsLmluYWN0aXZlT25jZSA9ICRyZXRhaW5TY3JvbGwudHJhY2tpbmcgPSBmYWxzZVxuICAgICRyb290U2NvcGUuJG9uICckdmlld0NvbnRlbnRMb2FkZWQnLCAoZSkgLT5cbiAgICAgIGlmICRyZXRhaW5TY3JvbGwuaW5hY3RpdmVPbmNlIG9yIG5vdCAkaW5qZWN0b3IuaW52b2tlKCRyZXRhaW5TY3JvbGwud2hldGhlclNjcm9sbEV2YWx1YXRvcilcbiAgICAgICAgY29uc29sZS5sb2cgXCJtb3ZlIHRvIHNjcm9sbCB0b3AgJW9cIiwgJHRhcmdldFswXVxuICAgICAgICAkdGFyZ2V0LnNjcm9sbFRvcCgwKVxuICAgICAgICAkcmV0YWluU2Nyb2xsLnRyYWNraW5nID0gdHJ1ZVxuICAgICAgZWxzZVxuICAgICAgICBpc0NhbmNlbCA9IGZhbHNlXG4gICAgICAgIGNhbmNlbFNjcm9sbGluZyA9IC0+ICRyZXRhaW5TY3JvbGwudHJhY2tpbmcgPSB0cnVlOyBjb25zb2xlLmxvZyAnQ2FuY2VsZWQgc2Nyb2xsaW5nICVvJywgJHRhcmdldFswXVxuICAgICAgICBvZmZTY29wZURlc3Ryb3kgPSBlLnRhcmdldFNjb3BlLiRvbiAnJGRlc3Ryb3knLCAtPiBpc0NhbmNlbCA9IHRydWU7IG9mZlNjcm9sbENhbmNlbGVyKClcbiAgICAgICAgb2ZmU2Nyb2xsQ2FuY2VsZXIgPSAtPiAkdGFyZ2V0Lm9mZiAnc2Nyb2xsLnJldGFpblNjcm9sbC1jYW5jZWxlcicgKyBlLnRhcmdldFNjb3BlLiRpZFxuICAgICAgICBvblNjcm9sbENhbmNlbGVyID0gLT4gJHRhcmdldC5vbmUgJ3Njcm9sbC5yZXRhaW5TY3JvbGwtY2FuY2VsZXInICsgZS50YXJnZXRTY29wZS4kaWQsIC0+IGlzQ2FuY2VsID0gdHJ1ZTsgb2ZmU2NvcGVEZXN0cm95KClcbiAgICAgICAgJHRpbWVvdXQoLT5cbiAgICAgICAgICBpZiBpc0NhbmNlbCB0aGVuIGNhbmNlbFNjcm9sbGluZygpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgdHJ5Q291bnQgPSAkcmV0YWluU2Nyb2xsLm1heFRyeUNvdW50XG4gICAgICAgICAgICBzY3JvbGxUb3AgPSAkcmV0YWluU2Nyb2xsLnBvc2l0aW9uc1skbG9jYXRpb24udXJsKCldIG9yIDBcbiAgICAgICAgICAgICh0cnlTY3JvbGwgPSAtPlxuICAgICAgICAgICAgICBpZiBpc0NhbmNlbCB0aGVuIGNhbmNlbFNjcm9sbGluZygpXG4gICAgICAgICAgICAgIGVsc2UgaWYgJGluamVjdG9yLmludm9rZSgkcmV0YWluU2Nyb2xsLmlzRGVsYXllZEV2YWx1YXRvcikgdGhlbiAkdGltZW91dCh0cnlTY3JvbGwsIDIwMClcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9mZlNjcm9sbENhbmNlbGVyKClcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LnNjcm9sbFRvcChzY3JvbGxUb3ApXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cgXCIjezEgKyAkcmV0YWluU2Nyb2xsLm1heFRyeUNvdW50IC0gdHJ5Q291bnR9IHRyeSBtb3ZlIHRvIHNjcm9sbGluZyAjeyR0YXJnZXQuc2Nyb2xsVG9wKCl9IC8gI3tzY3JvbGxUb3B9ICVvXCIsICR0YXJnZXRbMF1cbiAgICAgICAgICAgICAgICBpZiAkdGFyZ2V0LnNjcm9sbFRvcCgpIGlzIHNjcm9sbFRvcCBvciAtLXRyeUNvdW50IDw9IDBcbiAgICAgICAgICAgICAgICAgICRyZXRhaW5TY3JvbGwudHJhY2tpbmcgPSB0cnVlXG4gICAgICAgICAgICAgICAgICBvZmZTY29wZURlc3Ryb3koKVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgIG9uU2Nyb2xsQ2FuY2VsZXIoKVxuICAgICAgICAgICAgICAgICAgJHRpbWVvdXQodHJ5U2Nyb2xsLCAxMDApXG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgKSgpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgICwgMClcbiAgICAgIHJldHVyblxuICAgIHJldHVyblxuXVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3NlcnZpY2VzL3JldGFpblNjcm9sbC5jb2ZmZWVcbiAqKi8iLCIndXNlIHN0cmljdCdcblxuXG5hbmd1bGFyLm1vZHVsZSAnbmdFeHRlbmRzLnNlcnZpY2VzLnNlYXJjaEZvcm0nLCBbXVxuXG4uZmFjdG9yeSAnJHNlYXJjaEZvcm0nLCBbLT4gKG9wdGlvbnMpIC0+XG5cbiAgY2xhc3MgU2VhcmNoRm9ybVxuICAgIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMpIC0+XG4gICAgICBpZiBhbmd1bGFyLmlzRnVuY3Rpb24gQG9wdGlvbnNcbiAgICAgICAgQG9wdGlvbnMgPSBhY3Rpb246IEBvcHRpb25zXG4gICAgICBAb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKFxuICAgICAgICBkZWZhdWx0czoge31cbiAgICAgICAgcHJlU3VibWl0OiAoZm9ybSwgZmlsdGVycywgdW5maWx0ZXJzKSAtPlxuICAgICAgICBwcmVSZXNldDogKGZvcm0pIC0+XG4gICAgICAgIHN1Ym1pdDogKGZvcm0sIGZpbHRlcnMsIHVuZmlsdGVycykgLT5cbiAgICAgICAgcmVzZXQ6IChmb3JtKSAtPlxuICAgICAgICBhY3Rpb246IChmb3JtKSAtPlxuICAgICAgICAjdHJhbnNmb3JtOiAoa2V5LCB2YWx1ZSkgLT4gdmFsdWVcbiAgICAgICwgQG9wdGlvbnMpXG5cbiAgICAgIEBjdXJyZW50ID0gYW5ndWxhci5jb3B5KEBvcHRpb25zLmRlZmF1bHRzKSBvciB7fVxuICAgICAgQGZvcm0gPSBhbmd1bGFyLmNvcHkoQG9wdGlvbnMuZGVmYXVsdHMpIG9yIHt9XG5cbiAgICBpc1ByaXN0aW5lOiAtPiBhbmd1bGFyLmVxdWFscyhAY3VycmVudCwgQGZvcm0pXG4gICAgaXNEaXJ0eTogLT4gbm90IEBpc1ByaXN0aW5lKClcbiAgICBpc0NoYW5nZWQ6IC0+IG5vdCBhbmd1bGFyLmVxdWFscyhAY3VycmVudCwgQG9wdGlvbnMuZGVmYXVsdHMpXG5cbiAgICBzdWJtaXQ6IChmb3JtLCBmaWx0ZXJzLCB1bmZpbHRlcnMpIC0+XG4gICAgICBpZiBAb3B0aW9ucy5wcmVTdWJtaXQ/KGZvcm0sIGZpbHRlcnMsIHVuZmlsdGVycykgaXNudCBmYWxzZVxuICAgICAgICBpZiBmaWx0ZXJzP1xuICAgICAgICAgIGlzRmlsdGVyZWQgPSAoW2tleSwgdmFsdWVdICBmb3Iga2V5LCB2YWx1ZSBvZiBmaWx0ZXJzIG9yIHt9KS5ldmVyeSAoa2V5V2l0aFZhbHVlKSA9PlxuICAgICAgICAgICAgW2tleSwgdmFsdWVdID0ga2V5V2l0aFZhbHVlXG4gICAgICAgICAgICBhbmd1bGFyLmVxdWFscyhAZm9ybVtrZXldLCB2YWx1ZSwgdHJ1ZSlcbiAgICAgICAgICBhbmd1bGFyLmV4dGVuZChAZm9ybSwgYW5ndWxhci5jb3B5KGlmIGlzRmlsdGVyZWQgdGhlbiB1bmZpbHRlcnMgZWxzZSBmaWx0ZXJzKSlcbiAgICAgICAgQGN1cnJlbnQgPSBhbmd1bGFyLmNvcHkoQGZvcm0pXG4gICAgICAgIEBvcHRpb25zLnN1Ym1pdD8oZm9ybSwgZmlsdGVycywgdW5maWx0ZXJzKVxuICAgICAgICBAb3B0aW9ucy5hY3Rpb24/KGZvcm0pXG4gICAgICBAXG5cbiAgICByZXNldDogKGZvcm0pIC0+XG4gICAgICBpZiBAb3B0aW9ucy5wcmVSZXNldD8oZm9ybSkgaXNudCBmYWxzZVxuICAgICAgICBmb3JtPy4kc2V0UHJpc3RpbmU/KClcbiAgICAgICAgQGN1cnJlbnQgPSBhbmd1bGFyLmNvcHkoQG9wdGlvbnMuZGVmYXVsdHMpIG9yIHt9XG4gICAgICAgIEBmb3JtID0gYW5ndWxhci5jb3B5KEBvcHRpb25zLmRlZmF1bHRzKSBvciB7fVxuICAgICAgICBAb3B0aW9ucy5yZXNldD8oZm9ybSlcbiAgICAgICAgQG9wdGlvbnMuYWN0aW9uPyhmb3JtKVxuICAgICAgQFxuXG4gICAgcGFyYW1zOiAocmVmcmVzaCwgZGVmYXVsdHMpIC0+XG4gICAgICBbZGVmYXVsdHMsIHJlZnJlc2hdID0gW3JlZnJlc2gsIGZhbHNlXSAgaWYgYW5ndWxhci5pc09iamVjdCByZWZyZXNoXG5cbiAgICAgIHBhcmFtcyA9IGlmIHJlZnJlc2ggaXMgdHJ1ZVxuICAgICAgICBhbmd1bGFyLmNvcHkoQGN1cnJlbnQpXG4gICAgICBlbHNlXG4gICAgICAgIGFuZ3VsYXIuY29weShAZm9ybSA9IGFuZ3VsYXIuY29weShAY3VycmVudCkpXG5cbiAgICAgIGZvciBrZXkgb2YgQG9wdGlvbnMuZGVmYXVsdHNcbiAgICAgICAgcGFyYW1zW2tleV0gPSBwYXJhbXNba2V5XS5maWx0ZXIoKGEpIC0+ICEhYSkgIGlmIGFuZ3VsYXIuaXNBcnJheSBwYXJhbXNba2V5XVxuXG4gICAgICBwYXJhbXMgPSBhbmd1bGFyLmV4dGVuZCBwYXJhbXMsIGFuZ3VsYXIuY29weShkZWZhdWx0cylcblxuICAgICAgaWYgYW5ndWxhci5pc0Z1bmN0aW9uIEBvcHRpb25zLnRyYW5zZm9ybVxuICAgICAgICBwYXJhbXNba2V5XSA9IEBvcHRpb25zLnRyYW5zZm9ybShrZXksIHZhbHVlKSAgZm9yIGtleSwgdmFsdWUgb2YgcGFyYW1zXG5cbiAgICAgIHBhcmFtc1xuXG4gIG5ldyBTZWFyY2hGb3JtKG9wdGlvbnMpXG5dXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9zZXJ2aWNlcy9zZWFyY2hGb3JtLmNvZmZlZVxuICoqLyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
