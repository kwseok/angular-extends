!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("angular"));else if("function"==typeof define&&define.amd)define(["angular"],n);else{var e=n("object"==typeof exports?require("angular"):t.angular);for(var r in e)("object"==typeof exports?exports:t)[r]=e[r]}}(this,function(t){return function(t){function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){(function(t){"use strict";e(3),e(4),e(5),e(6),e(7),e(8),e(9),e(10),e(11),e(12),e(14),t.module("ngExtends.directives",["ngExtends.directives.countTo","ngExtends.directives.domInit","ngExtends.directives.focusMe","ngExtends.directives.lower","ngExtends.directives.repeatDone","ngExtends.directives.rotate2d","ngExtends.directives.upper"]),t.module("ngExtends.filters",["ngExtends.filters.arrays","ngExtends.filters.strings"]),t.module("ngExtends.services",["ngExtends.services.playRoutes","ngExtends.services.searchForm"]),t.module("ngExtends",["ngExtends.directives","ngExtends.filters","ngExtends.services"])}).call(n,e(1))},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}var i=e(2),o=r(i);if(!$)throw new Error("Angular.extends requires a AngularJS");t.exports=o["default"]},function(n,e){n.exports=t},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.countTo",[]).directive("exCountTo",["$timeout",function(t){return{replace:!1,scope:!0,link:function(n,e,r){var i,o,u,s,c,l,f,a,p,d;u=e[0],c=null,l=null,p=null,a=null,o=null,s=null,i=function(){var t;l=30,a=0,n.timoutId=null,o=parseInt(r.exCountTo)||0,n.value=parseInt(r.value,10)||0,t=1e3*parseFloat(r.duration)||0,p=Math.ceil(t/l),s=(o-n.value)/p,c=n.value},d=function(){n.timoutId=t(function(){return c+=s,a++,a>=p?(t.cancel(n.timoutId),c=o,u.textContent=o):(u.textContent=Math.round(c),d())},l)},f=function(){null!=n.timoutId&&t.cancel(n.timoutId),i(),d()},r.$observe("exCountTo",function(t){return null!=t?f():void 0}),r.$observe("value",function(){return f()})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.domInit",[]).directive("exDomInit",[function(){return{restrict:"A",link:function(t,n,e){e.$observe("exDomInit",function(e){var r;return"function"==typeof(r=t.$eval(e))?r(n):void 0})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.focusMe",[]).directive("exFocusMe",[function(){return{scope:{trigger:"=exFocusMe"},link:function(t,n){t.$watch("trigger",function(e){var r;"boolean"==typeof e&&("function"==typeof n[r=e?"focus":"blur"]&&n[r](),t.trigger=null)})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.lower",[]).directive("exLower",[function(){return{require:"ngModel",link:function(t,n,e,r){var i;i=function(t){var e,i,o,u;return o=t?t.toLowerCase():t,o!==t&&(e=n[0],u=e.selectionStart,i=e.selectionEnd,r.$setViewValue(o),r.$render(),"function"==typeof e.setSelectionRange&&e.setSelectionRange(u,i)),o},r.$parsers.push(i),i(t[e.ngModel])}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.repeatDone",[]).directive("exRepeatDone",[function(){return{restrict:"A",link:function(t,n,e){null==e.ngRepeat&&null==e.ngRepeatStart||!t.$last||e.$observe("exRepeatDone",function(e){var r;return"function"==typeof(r=t.$eval(e))?r(n):void 0})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.rotate2d",[]).directive("exRotate2d",[function(){return{scope:{value:"=exRotate2d",limit:"=",angle:"="},link:function(t,n){t.$watchCollection("[value, limit, angle]",function(t){var e,r,i,o;o=t[0]||0,i=t[1]||10,e=t[2]||360,r=o*e/i,n.css({"-webkit-transform":"rotate("+r+"deg)","-moz-transform":"rotate("+r+"deg)",transform:"rotate("+r+"deg)"})})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.upper",[]).directive("exUpper",[function(){return{require:"ngModel",link:function(t,n,e,r){var i;i=function(t){var e,i,o,u;return u=t?t.toUpperCase():t,u!==t&&(e=n[0],o=e.selectionStart,i=e.selectionEnd,r.$setViewValue(u),r.$render(),"function"==typeof e.setSelectionRange&&e.setSelectionRange(o,i)),u},r.$parsers.push(i),i(t[e.ngModel])}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";var n=[].slice;t.module("ngExtends.filters.arrays",[]).filter("makeArray",[function(){return function(n){return t.isArray(n)?n:$.makeArray(n)}}]).filter("range",[function(){return function(t,n,e){var r,i,o,u,s,c,l,f,a;for(null==e&&(e=1),u="number"==typeof t&&"number"==typeof n,r=u?t:t.toString().charCodeAt(0),i=u?n:n.toString().charCodeAt(0),a=[],o=s=c=r,l=i,f=r>i?-e:e;f>0?l>=s:s>=l;o=s+=f)u?a.push(o):a.push(String.fromCharCode(o));return a}}]).filter("join",[function(){return function(t,n){return $.makeArray(t).join(n)}}]).filter("combine",["$parse",function(e){return function(){var r,i,o,u;return r=arguments[0],o=2<=arguments.length?n.call(arguments,1):[],t.isArray(r)||(r=[r]),function(){var n,s,c,l,f;for(f=[],n=0,c=r.length;c>n;n++){for(u=r[n],s=0,l=o.length;l>s;s++)i=o[s],t.isFunction(i)?u=i(u):"string"==typeof i&&(u=function(){switch(i){case"=integer":return parseInt(u);case"=float":return parseFloat(u);default:return e(i)(u)}}());f.push(u)}return f}().reduce(function(t,n){return t+n})}}]).filter("limit",[function(){return function(t,n,e){var r,i;return r=(n-1)*e,i=r+e,$.makeArray(t).slice(r,i)}}]).filter("trim",[function(){return function(n){var e,r,i,o,u,s;if(t.isArray(n)){for(s=[],r=0,i=n.length;i>r;r++)e=n[r],s.push(null!=e&&"function"==typeof e.toString&&null!=(o=e.toString())&&"function"==typeof o.trim?o.trim():void 0);return s}return null!=n&&"function"==typeof n.toString&&null!=(u=n.toString())&&"function"==typeof u.trim?u.trim():void 0}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.filters.strings",[]).filter("trustAs",["$sce",function(t){return function(n,e){return t.trustAs(e,n)}}]).filter("trustAsCss",["$sce",function(t){return t.trustAsCss}]).filter("trustAsHtml",["$sce",function(t){return t.trustAsHtml}]).filter("trustAsJs",["$sce",function(t){return t.trustAsJs}]).filter("trustAsResourceUrl",["$sce",function(t){return t.trustAsResourceUrl}]).filter("trustAsUrl",["$sce",function(t){return t.trustAsUrl}]).filter("replace",[function(){return function(t,n,e,r){return n instanceof RegExp||(n=new RegExp((n||"").toString(),r)),(t||"").toString().replace(n,e)}}]).filter("nl2br",[function(){return function(t){return(t||"").toString().replace(/(\r\n|\n\r|\r|\n)/g,"<br/>")}}]).filter("br2nl",[function(){return function(t){return(t||"").toString().replace(/(<br>|<br\/>)/g,"\n")}}]).filter("space2nbsp",[function(){return function(t){return(t||"").toString().replace(/\s/g,"&nbsp;")}}]).filter("nbsp2space",[function(){return function(t){return(t||"").toString().replace(/&nbsp;/g," ")}}]).filter("split",[function(){return function(n,e,r){return null==n?n:n.toString().split(new RegExp((t.isArray(e)?e.join("|"):e).toString()),r)}}]).filter("cutstring",[function(){return function(t,n,e){var r;return null==n&&(n=10),null==e&&(e="..."),null==t?t:(r=t.toString(),r.length>n-e.length&&(r=r.slice(0,n)+e),r)}}]).filter("roundcutstring",[function(){return function(t,n,e,r,i){var o,u,s,c;return null==e&&(e=20),null==r&&(r="..."),null==i&&(i="..."),null==t?t:(s=t.toString(),c=(n||"").toString(),u=s.indexOf(c),-1===u?(s.length>e-i.length&&(s=s.slice(0,e)+i),s):(o=function(t,n,e,u){var s,c,l,f,a,p,d;return 0>=u||0===t.length&&0===n.length?(s=t.length>0?r:"",c=n.length>0?i:"",s+e+c):(l=u/2,1>l?o(t.slice(0,-1),n,t.slice(-1)+e,0):(a=t.slice(-l),f=n.slice(0,l),d=t.slice(0,-l),p=n.slice(l),o(d,p,a+e+f,u-a.length-f.length)))})(s.slice(0,u),s.slice(u+c.length),c,e-c.length-r.length-i.length))}}])}).call(n,e(1))},function(t,n,e){(function(t,n){"use strict";var e=[].slice;t.module("ngExtends.services.playRoutes",[]).provider("$playRoutes",[function(){this.jsRoutes=n.Routes,this.$get=["$http","$location",function(n){return function(r,i){var o,u,s;return s=function(t){return function(){var n,o,u,s,c,l,f;return l=t.apply(this,arguments),u=l.method.toLowerCase(),n=l.absoluteURL(),o=null!=(s=n.match(/^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i))?s[1]:void 0,f=i.host()===o?l.url:n,c={$route:l,method:u,url:f,absoluteURL:l.absoluteURL,webSocketURL:l.webSocketURL},c.ajax=function(t){return t=t||{},t.method=u,t.url=f,r(t)},c[u]=function(){var t,n;return n=1<=arguments.length?e.call(arguments,0):[],(t=r[u]).apply(t,[].concat.call([f],n))},c}},(o=function(n,e){var r,i;for(r in e)i=e[r],t.isFunction(i)?n[r]=s(i):(r in n||(n[r]={}),o(n[r],i))})(u={},n.jsRoutes),u}}(this)]}])}).call(n,e(1),e(13))},function(t,n){(function(n){"use strict";if(!n.document)throw new Error("Angular.extends requires a window with a document");t.exports=n}).call(n,function(){return this}())},function(t,n,e){(function(t){"use strict";t.module("ngExtends.services.searchForm",[]).factory("$searchForm",[function(){return function(n){var e;return new(e=function(){function n(n){this.options=n,t.isFunction(this.options)&&(this.options={action:this.options}),this.options=t.extend({defaults:{},preSubmit:function(t,n,e){},preReset:function(t){},submit:function(t,n,e){},reset:function(t){},action:function(t){}},this.options),this.current=t.copy(this.options.defaults)||{},this.form=t.copy(this.options.defaults)||{}}return n.prototype.isPristine=function(){return t.equals(this.current,this.form)},n.prototype.isDirty=function(){return!this.isPristine()},n.prototype.isChanged=function(){return!t.equals(this.current,this.options.defaults)},n.prototype.submit=function(n,e,r){var i,o,u,s,c,l;return("function"==typeof(i=this.options).preSubmit?i.preSubmit(n,e,r):void 0)!==!1&&(null!=e&&(s=function(){var t,n;t=e||{},n=[];for(c in t)l=t[c],n.push([c,l]);return n}().every(function(n){return function(e){var r,i;return r=e[0],i=e[1],t.equals(n.form[r],i,!0)}}(this)),t.extend(this.form,t.copy(s?r:e))),this.current=t.copy(this.form),"function"==typeof(o=this.options).submit&&o.submit(n,e,r),"function"==typeof(u=this.options).action&&u.action(n)),this},n.prototype.reset=function(n){var e,r,i;return("function"==typeof(e=this.options).preReset?e.preReset(n):void 0)!==!1&&(null!=n&&"function"==typeof n.$setPristine&&n.$setPristine(),this.current=t.copy(this.options.defaults)||{},this.form=t.copy(this.options.defaults)||{},"function"==typeof(r=this.options).reset&&r.reset(n),"function"==typeof(i=this.options).action&&i.action(n)),this},n.prototype.params=function(n,e){var r,i,o,u;t.isObject(n)&&(o=[n,!1],e=o[0],n=o[1]),i=n===!0?t.copy(this.current):t.copy(this.form=t.copy(this.current));for(r in this.options.defaults)t.isArray(i[r])&&(i[r]=i[r].filter(function(t){return!!t}));if(i=t.extend(i,t.copy(e)),t.isFunction(this.options.transform))for(r in i)u=i[r],i[r]=this.options.transform(r,u);return i},n}())(n)}}])}).call(n,e(1))}])});
//# sourceMappingURL=data:application/json;base64,
