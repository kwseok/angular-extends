!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("jquery"),require("angular"));else if("function"==typeof define&&define.amd)define(["jquery","angular"],n);else{var e="object"==typeof exports?n(require("jquery"),require("angular")):n(t.jQuery,t.angular);for(var r in e)("object"==typeof exports?exports:t)[r]=e[r]}}(this,function(t,n){return function(t){function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){(function(t){"use strict";e(6),e(7),e(8),e(9),e(10),e(11),e(12),e(13),e(14),e(15),e(16),e(18),e(19),t.module("ngExtends.directives",["ngExtends.directives.countTo","ngExtends.directives.domInit","ngExtends.directives.focusMe","ngExtends.directives.lower","ngExtends.directives.repeatDone","ngExtends.directives.rotate2d","ngExtends.directives.upper"]),t.module("ngExtends.filters",["ngExtends.filters.arrays","ngExtends.filters.strings"]),t.module("ngExtends.services",["ngExtends.services.playRoutes","ngExtends.services.searchForm"]),t.module("ngExtends",["ngExtends.directives","ngExtends.filters","ngExtends.services"])}).call(n,e(1))},function(t,n,e){(function(n){"use strict";var r=e(3)["default"],o=e(5),i=r(o);if(!n)throw new Error("Angular.extends requires a AngularJS");t.exports=i["default"]}).call(n,e(2))},function(t,n,e){"use strict";var r=e(3)["default"],o=e(4),i=r(o);if(!i["default"])throw new Error("Angular.extends requires a jQuery");t.exports=i["default"]},function(t,n){"use strict";n["default"]=function(t){return t&&t.__esModule?t:{"default":t}},n.__esModule=!0},function(n,e){n.exports=t},function(t,e){t.exports=n},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.countTo",[]).directive("exCountTo",["$timeout",function(t){return{replace:!1,scope:!0,link:function(n,e,r){var o,i,u,s,c,l,f,a,p,d;u=e[0],c=null,l=null,p=null,a=null,i=null,s=null,o=function(){var t;l=30,a=0,n.timoutId=null,i=parseInt(r.exCountTo)||0,n.value=parseInt(r.value,10)||0,t=1e3*parseFloat(r.duration)||0,p=Math.ceil(t/l),s=(i-n.value)/p,c=n.value},d=function(){n.timoutId=t(function(){return c+=s,a++,a>=p?(t.cancel(n.timoutId),c=i,u.textContent=i):(u.textContent=Math.round(c),d())},l)},f=function(){null!=n.timoutId&&t.cancel(n.timoutId),o(),d()},r.$observe("exCountTo",function(t){return null!=t?f():void 0}),r.$observe("value",function(){return f()})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.domInit",[]).directive("exDomInit",[function(){return{restrict:"A",link:function(t,n,e){e.$observe("exDomInit",function(e){var r;return"function"==typeof(r=t.$eval(e))?r(n):void 0})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.focusMe",[]).directive("exFocusMe",[function(){return{scope:{trigger:"=exFocusMe"},link:function(t,n){t.$watch("trigger",function(e){var r;"boolean"==typeof e&&("function"==typeof n[r=e?"focus":"blur"]&&n[r](),t.trigger=null)})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.lower",[]).directive("exLower",[function(){return{require:"ngModel",link:function(t,n,e,r){var o;o=function(t){var e,o,i,u;return i=t?t.toLowerCase():t,i!==t&&(e=n[0],u=e.selectionStart,o=e.selectionEnd,r.$setViewValue(i),r.$render(),"function"==typeof e.setSelectionRange&&e.setSelectionRange(u,o)),i},r.$parsers.push(o),o(t[e.ngModel])}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.repeatDone",[]).directive("exRepeatDone",[function(){return{restrict:"A",link:function(t,n,e){null==e.ngRepeat&&null==e.ngRepeatStart||!t.$last||e.$observe("exRepeatDone",function(e){var r;return"function"==typeof(r=t.$eval(e))?r(n):void 0})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.rotate2d",[]).directive("exRotate2d",[function(){return{scope:{value:"=exRotate2d",limit:"=",angle:"="},link:function(t,n){t.$watchCollection("[value, limit, angle]",function(t){var e,r,o,i;i=t[0]||0,o=t[1]||10,e=t[2]||360,r=i*e/o,n.css({"-webkit-transform":"rotate("+r+"deg)","-moz-transform":"rotate("+r+"deg)",transform:"rotate("+r+"deg)"})})}}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.directives.upper",[]).directive("exUpper",[function(){return{require:"ngModel",link:function(t,n,e,r){var o;o=function(t){var e,o,i,u;return u=t?t.toUpperCase():t,u!==t&&(e=n[0],i=e.selectionStart,o=e.selectionEnd,r.$setViewValue(u),r.$render(),"function"==typeof e.setSelectionRange&&e.setSelectionRange(i,o)),u},r.$parsers.push(o),o(t[e.ngModel])}}}])}).call(n,e(1))},function(t,n,e){(function(t,n){"use strict";var e=[].slice;t.module("ngExtends.filters.arrays",[]).filter("makeArray",[function(){return function(e){return t.isArray(e)?e:n.makeArray(e)}}]).filter("range",[function(){return function(t,n,e){var r,o,i,u,s,c,l,f,a;for(null==e&&(e=1),u="number"==typeof t&&"number"==typeof n,r=u?t:t.toString().charCodeAt(0),o=u?n:n.toString().charCodeAt(0),a=[],i=s=c=r,l=o,f=r>o?-e:e;f>0?l>=s:s>=l;i=s+=f)u?a.push(i):a.push(String.fromCharCode(i));return a}}]).filter("join",[function(){return function(t,e){return n.makeArray(t).join(e)}}]).filter("combine",["$parse",function(n){return function(){var r,o,i,u;return r=arguments[0],i=2<=arguments.length?e.call(arguments,1):[],t.isArray(r)||(r=[r]),function(){var e,s,c,l,f;for(f=[],e=0,c=r.length;c>e;e++){for(u=r[e],s=0,l=i.length;l>s;s++)o=i[s],t.isFunction(o)?u=o(u):"string"==typeof o&&(u=function(){switch(o){case"=integer":return parseInt(u);case"=float":return parseFloat(u);default:return n(o)(u)}}());f.push(u)}return f}().reduce(function(t,n){return t+n})}}]).filter("limit",[function(){return function(t,e,r){var o,i;return o=(e-1)*r,i=o+r,n.makeArray(t).slice(o,i)}}]).filter("trim",[function(){return function(n){var e,r,o,i,u,s;if(t.isArray(n)){for(s=[],r=0,o=n.length;o>r;r++)e=n[r],s.push(null!=e&&"function"==typeof e.toString&&null!=(i=e.toString())&&"function"==typeof i.trim?i.trim():void 0);return s}return null!=n&&"function"==typeof n.toString&&null!=(u=n.toString())&&"function"==typeof u.trim?u.trim():void 0}}])}).call(n,e(1),e(2))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.filters.strings",[]).filter("trustAs",["$sce",function(t){return function(n,e){return t.trustAs(e,n)}}]).filter("trustAsCss",["$sce",function(t){return t.trustAsCss}]).filter("trustAsHtml",["$sce",function(t){return t.trustAsHtml}]).filter("trustAsJs",["$sce",function(t){return t.trustAsJs}]).filter("trustAsResourceUrl",["$sce",function(t){return t.trustAsResourceUrl}]).filter("trustAsUrl",["$sce",function(t){return t.trustAsUrl}]).filter("replace",[function(){return function(t,n,e,r){return n instanceof RegExp||(n=new RegExp((n||"").toString(),r)),(t||"").toString().replace(n,e)}}]).filter("nl2br",[function(){return function(t){return(t||"").toString().replace(/(\r\n|\n\r|\r|\n)/g,"<br/>")}}]).filter("br2nl",[function(){return function(t){return(t||"").toString().replace(/(<br>|<br\/>)/g,"\n")}}]).filter("space2nbsp",[function(){return function(t){return(t||"").toString().replace(/\s/g,"&nbsp;")}}]).filter("nbsp2space",[function(){return function(t){return(t||"").toString().replace(/&nbsp;/g," ")}}]).filter("split",[function(){return function(n,e,r){return null==n?n:n.toString().split(new RegExp((t.isArray(e)?e.join("|"):e).toString()),r)}}]).filter("cutstring",[function(){return function(t,n,e){var r;return null==n&&(n=10),null==e&&(e="..."),null==t?t:(r=t.toString(),r.length>n-e.length&&(r=r.slice(0,n)+e),r)}}]).filter("roundcutstring",[function(){return function(t,n,e,r,o){var i,u,s,c;return null==e&&(e=20),null==r&&(r="..."),null==o&&(o="..."),null==t?t:(s=t.toString(),c=(n||"").toString(),u=s.indexOf(c),-1===u?(s.length>e-o.length&&(s=s.slice(0,e)+o),s):(i=function(t,n,e,u){var s,c,l,f,a,p,d;return 0>=u||0===t.length&&0===n.length?(s=t.length>0?r:"",c=n.length>0?o:"",s+e+c):(l=u/2,1>l?i(t.slice(0,-1),n,t.slice(-1)+e,0):(a=t.slice(-l),f=n.slice(0,l),d=t.slice(0,-l),p=n.slice(l),i(d,p,a+e+f,u-a.length-f.length)))})(s.slice(0,u),s.slice(u+c.length),c,e-c.length-r.length-o.length))}}])}).call(n,e(1))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.services.locationState",[]).run(["$rootScope","$window","$location",function(t,n,e){t.$on("$locationChangeSuccess",function(){return e.$$actualPath=e.path()}),t.$watch(function(){return e.path()},function(t){return e.isHistoryChanged=e.$$actualPath===t})}])}).call(n,e(1))},function(t,n,e){(function(t,n){"use strict";t.module("ngExtends.services.playRoutes",[]).provider("$playRoutes",[function(){this.jsRoutes=n.Routes,this.$get=["$http","$location",function(n){return function(e,r){var o,i,u;return u=function(t){return function(){var n,o,i,u,s,c,l;return c=t.apply(this,arguments),i=c.method.toLowerCase(),n=c.absoluteURL(),o=null!=(u=n.match(/^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i))?u[1]:void 0,l=r.host()===o?c.url:n,s={$route:c,method:i,url:l,absoluteURL:c.absoluteURL,webSocketURL:c.webSocketURL},s[i]=function(t){return e[i](l,t)},s}},(o=function(n,e){var r,i;for(r in e)i=e[r],t.isFunction(i)?n[r]=u(i):(r in n||(n[r]={}),o(n[r],i))})(i={},n.jsRoutes),i}}(this)]}])}).call(n,e(1),e(17))},function(t,n){(function(n){"use strict";if(!n.document)throw new Error("jQuery.extends requires a window with a document");t.exports=n}).call(n,function(){return this}())},function(t,n,e){(function(t,n,r){"use strict";e(15),t.module("ngExtends.services.retainScroll",["ngExtends.services.locationState"]).provider("$retainScroll",[function(){this.target=null,this.inactiveOnce=!1,this.tracking=!1,this.positions={},this.maxTryCount=10,this.whetherScrollEvaluator=["$location",function(t){return t.isHistoryChanged}],this.isDelayedEvaluator=[function(){return!1}],this.$get=[function(){return this}]}]).run(["$rootScope","$retainScroll","$location","$timeout","$injector",function(t,e,o,i,u){var s;s=n(e.target||r),s.on("scroll",function(){return e.tracking?e.positions[o.url()]=s.scrollTop():void 0}),t.$on("$locationChangeSuccess",function(){return e.inactiveOnce=e.tracking=!1}),t.$on("$viewContentLoaded",function(t){var n,r,c,l,f;e.inactiveOnce||!u.invoke(e.whetherScrollEvaluator)?(console.log("move to scroll top %o",s[0]),s.scrollTop(0),e.tracking=!0):(r=!1,n=function(){return e.tracking=!0,console.log("Canceled scrolling %o",s[0])},c=t.targetScope.$on("$destroy",function(){return r=!0,l()}),l=function(){return s.off("scroll.retainScroll-canceler"+t.targetScope.$id)},f=function(){return s.one("scroll.retainScroll-canceler"+t.targetScope.$id,function(){return r=!0,c()})},i(function(){var t,a,p;r?n():(a=e.maxTryCount,t=e.positions[o.url()]||0,(p=function(){r?n():u.invoke(e.isDelayedEvaluator)?i(p,200):(l(),s.scrollTop(t),console.log(1+e.maxTryCount-a+" try move to scrolling "+s.scrollTop()+" / "+t+" %o",s[0]),s.scrollTop()===t||--a<=0?(e.tracking=!0,c()):(f(),i(p,100)))})())},0))})}])}).call(n,e(1),e(2),e(17))},function(t,n,e){(function(t){"use strict";t.module("ngExtends.services.searchForm",[]).factory("$searchForm",[function(){return function(n){var e;return new(e=function(){function n(n){this.options=n,t.isFunction(this.options)&&(this.options={action:this.options}),this.options=t.extend({defaults:{},preSubmit:function(t,n,e){},preReset:function(t){},submit:function(t,n,e){},reset:function(t){},action:function(t){}},this.options),this.current=t.copy(this.options.defaults)||{},this.form=t.copy(this.options.defaults)||{}}return n.prototype.isPristine=function(){return t.equals(this.current,this.form)},n.prototype.isDirty=function(){return!this.isPristine()},n.prototype.isChanged=function(){return!t.equals(this.current,this.options.defaults)},n.prototype.submit=function(n,e,r){var o,i,u,s,c,l;return("function"==typeof(o=this.options).preSubmit?o.preSubmit(n,e,r):void 0)!==!1&&(null!=e&&(s=function(){var t,n;t=e||{},n=[];for(c in t)l=t[c],n.push([c,l]);return n}().every(function(n){return function(e){var r,o;return r=e[0],o=e[1],t.equals(n.form[r],o,!0)}}(this)),t.extend(this.form,t.copy(s?r:e))),this.current=t.copy(this.form),"function"==typeof(i=this.options).submit&&i.submit(n,e,r),"function"==typeof(u=this.options).action&&u.action(n)),this},n.prototype.reset=function(n){var e,r,o;return("function"==typeof(e=this.options).preReset?e.preReset(n):void 0)!==!1&&(null!=n&&"function"==typeof n.$setPristine&&n.$setPristine(),this.current=t.copy(this.options.defaults)||{},this.form=t.copy(this.options.defaults)||{},"function"==typeof(r=this.options).reset&&r.reset(n),"function"==typeof(o=this.options).action&&o.action(n)),this},n.prototype.params=function(n,e){var r,o,i,u;t.isObject(n)&&(i=[n,!1],e=i[0],n=i[1]),o=n===!0?t.copy(this.current):t.copy(this.form=t.copy(this.current));for(r in this.options.defaults)t.isArray(o[r])&&(o[r]=o[r].filter(function(t){return!!t}));if(o=t.extend(o,t.copy(e)),t.isFunction(this.options.transform))for(r in o)u=o[r],o[r]=this.options.transform(r,u);return o},n}())(n)}}])}).call(n,e(1))}])});
//# sourceMappingURL=data:application/json;base64,
