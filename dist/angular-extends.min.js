!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("jquery"),require("angular")):"function"==typeof define&&define.amd?define(["jquery","angular"],t):"object"==typeof exports?exports.angular=t(require("jquery"),require("angular")):e.angular=t(e.jQuery,e.angular)}(this,function(e,t){return function(e){function t(r){if(n[r])return n[r].exports;var u=n[r]={exports:{},id:r,loaded:!1};return e[r].call(u.exports,u,u.exports,t),u.loaded=!0,u.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){(function(r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(6),n(7),n(8),r.module("ngExtends.directives",["ngExtends.directives.changeTagsTo","ngExtends.directives.changeTagsToArray","ngExtends.directives.countTo"]),t["default"]=r.module("ngExtends",["ngExtends.directives"]),e.exports=t["default"]}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var r=n(3)["default"],u=n(5),o=r(u);if(!t)throw new Error("Angular.extends requires a AngularJS");e.exports=o["default"]}).call(t,n(2))},function(e,t,n){"use strict";var r=n(3)["default"],u=n(4),o=r(u);if(!o["default"])throw new Error("jQuery.extends requires a jQuery");e.exports=o["default"]},function(e,t){"use strict";t["default"]=function(e){return e&&e.__esModule?e:{"default":e}},t.__esModule=!0},function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t,n){(function(t){"use strict";e.exports=t.module("ngExtends.directives.changeTagsTo",[]).constant("extChangeTagsToConfig",{seperator:"|"}).directive("extChangeTagsTo",["extChangeTagsToConfig","$parse","uniqueFilter",function(e,t,n){return{restrict:"AC",require:"tagsInput",link:function(r,u,o){var i,a,l,c,s;return i=t(o.ngModel),c=i.assign,a=t(o.changeTagsTo),s=a.assign,l=e.seperator,o.$observe("extChangeTagsToSeperator",function(t){return l=t||e.seperator}),r.$watch(a,function(e){var t,u,o;return o=n(null!=e&&"function"==typeof e.split&&null!=(t=e.split(l))&&"function"==typeof t.filter?t.filter(function(e){return!!e}):void 0)||[],c(r,function(){var e,t,n;for(n=[],e=0,t=o.length;t>e;e++)u=o[e],n.push({text:u});return n}())}),void r.$watchCollection(function(){var e,t,n,u,o;for(n=i(r)||[],u=[],e=0,t=n.length;t>e;e++)o=n[e],u.push(o.text);return u},function(e){var t;return null!=e&&null!=s?s(r,function(){var n,r,u,o;for(u=e||[],o=[],n=0,r=u.length;r>n;n++)t=u[n],o.push(t);return o}().join(l)):void 0})}}}])}).call(t,n(1))},function(e,t,n){(function(t,n){"use strict";e.exports=t.module("ngExtends.directives.changeTagsToArray",[]).directive("extChangeTagsToArray",["$parse","uniqueFilter",function(e,t){return{restrict:"AC",require:"tagsInput",link:function(r,u,o){var i,a,l,c;return i=e(o.ngModel),l=i.assign,a=e(o.changeTagsToArray),c=a.assign,r.$watch(a,function(e){var u;return l(r,function(){var r,o,i,a;for(i=t(n.makeArray(e)),a=[],r=0,o=i.length;o>r;r++)u=i[r],a.push({text:u});return a}())}),void r.$watchCollection(function(){var e,t,n,u,o;for(n=i(r)||[],u=[],e=0,t=n.length;t>e;e++)o=n[e],u.push(o.text);return u},function(e){var t;return null!=e&&null!=c?c(r,function(){var n,r,u,o;for(u=e||[],o=[],n=0,r=u.length;r>n;n++)t=u[n],o.push(t);return o}()):void 0})}}}])}).call(t,n(1),n(2))},function(e,t,n){(function(t){"use strict";e.exports=t.module("ngExtends.directives.countTo",[]).directive("extCountTo",["$timeout",function(e){return{replace:!1,scope:!0,link:function(t,n,r){var u,o,i,a,l,c,s,f,d,g;return i=n[0],l=null,c=null,d=null,f=null,o=null,a=null,u=function(){var e;return c=30,f=0,t.timoutId=null,o=parseInt(r.countTo)||0,t.value=parseInt(r.value,10)||0,e=1e3*parseFloat(r.duration)||0,d=Math.ceil(e/c),a=(o-t.value)/d,l=t.value},g=function(){return t.timoutId=e(function(){return l+=a,f++,f>=d?(e.cancel(t.timoutId),l=o,i.textContent=o):(i.textContent=Math.round(l),g())},c)},s=function(){return null!=t.timoutId&&e.cancel(t.timoutId),u(),g()},r.$observe("countTo",function(e){return null!=e?s():void 0}),void r.$observe("value",function(){return s()})}}}])}).call(t,n(1))}])});
//# sourceMappingURL=data:application/json;base64,
